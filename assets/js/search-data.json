{
  
    
        "post0": {
            "title": "Lesson 3.17 3.18",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 5 16 8 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 19 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/12/14/Lesson3.17-3.18.html",
            "relUrl": "/2022/12/14/Lesson3.17-3.18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson 3.17 3.18 hack",
            "content": "",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/14/Lesson3.17-3.18-hack.html",
            "relUrl": "/notebook/2022/12/14/Lesson3.17-3.18-hack.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson 3.17 3.18 blog",
            "content": "Hailstone numbers . Hailstone numbers are the sequence of integers generated by Collatz conjecture | . Example of the use of collatz: . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 3 10 5 16 8 4 2 1 . Vocabulary . - Collatz: The conjecture asks whether repeating two siple arithmetic operation will transform every positive integer into 1. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/14/Lesson3.17-3.18-blog.html",
            "relUrl": "/notebook/2022/12/14/Lesson3.17-3.18-blog.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson 3.16",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 6 and are still in! You chose corner number 2 and are still in! You chose corner number 1000 and are still in! You chose corner number 4646464646 and are still in! You chose corner number 464646 and are still in! You chose corner number 4646 and are still in! You chose corner number 46464 and are still in! You chose corner number 4646 and are still in! You chose corner number 4646 and are still in! You chose corner number 4646 and are still in! You chose corner number 4646 and are still in! You chose corner number 46 and are still in! . ValueError Traceback (most recent call last) /home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb Cell 9 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; chooseCorner = input(&#34;What corner do you choose?&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; corner = random.randint(1,4) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; if int(chooseCorner) == corner: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; status = &#34;out&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/antony/antony-s-fastpage/_notebooks/2022-12-13-Lesson-3.16.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(&#34;You chose corner number &#34; + chooseCorner + &#34; and you&#39;re OUT&#34;) ValueError: invalid literal for int() with base 10: &#39;&#39; . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 4, 3] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson 3.16 Hack",
            "content": "Simulation . A simulation is an imitation of situation or process.(virtual experiment) | Simulation involve testing. | Simulation is more safer and efficient than experiment, however, some experiment can&#39;t be replace by simulation. | . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | My idea for a simulation is a car engine testing simulation. The simulation will run through different environment and each environment will have different chance to cause The engine to fail. The simulation will run until the engine fails and show how many test did engine lasted. | . Hack #2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | The rolling dice simulation chooses a random number from 1-6 that simulates rolling a dice. The advantages is that it is random. The disadvantage is that it is not related to a dice in the real world as it rolls random. | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . import random num_dice_input = input(&quot;How many times do you want to roll?&quot;) def countInput(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) num_dice = countInput(num_dice_input) def rollDice(numDice): result = [] for i in range(numDice): roll = random.randint(1, 6) result.append(roll) return result roll_results = rollDice(num_dice) def total(list): total = 0 for number in list: number = int(number) total += number return total sum = total(roll_results) print(&quot;you rolled:&quot;, roll_results) print(&quot;The sum is: &quot;, sum) . you rolled: [1, 4, 5, 3, 5, 5] The sum is: 23 . Extra Credit . The program randomly pick a test for the product, if the product meet some requirement, it will tell you if the product is good enough. | . import random test = random.randint(1,3) if test == 1: print(&quot;The product is not capable&quot;) if test == 2: print(&quot;Ok, but still needs testing&quot;) if test == 3: print(&quot;It&#39;s all set&quot;) . It&#39;s all set .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/13/Lesson-3.16-hack.html",
            "relUrl": "/notebook/2022/12/13/Lesson-3.16-hack.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lesson 3.16 blog",
            "content": "Simulation . A simulation is an imitation of situation or process.(virtual experiment) | Simulation involve testing. | Simulation is more safer and efficient than experiment, however, some experiment can&#39;t be replace by simulation. Ex: | Test the safety of a car | Games | test the efficiency of a airport | . Simulation vs. Experiment . Advantages: Can be safer | More cost-effective | Take less time | . | Disadvantages: Not as accurate as experiments | outside factors not included Not do simulation when a situation already has set a result. | . | . Experiment . We did a four corner experiment in class. We create for corner in the classroom where student could stand and let the teacher randomly pick one corner which will will be terminated. This is the same principle as the random library in python. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/13/Lesson-3.16-blog.html",
            "relUrl": "/notebook/2022/12/13/Lesson-3.16-blog.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Lesson 3.14 & 3.15 blog",
            "content": "Library . Library: a library is a collection of code from an external source that can be used to add functions to a program(It convenience writing programs). For example, math is a library that have function of math, one of the function is square root a number which is written in &quot;sqrt&quot;. | . Example of use of library . import math math.comb(12,10) . 66 . This code returns you the number of ways to choose k items from n items without repetition and without order. . Randomization . -The random library allows you to get a random number from a list, like rolling a dice. . For example, if you want to find a number from 1 to 10. . import random random.randint(1,10) . Different method of library . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . 3.15.2 . random (a,b) will give you a integer between a and b. | . Rolling coin example: . import random # choose either 1 or 2 flip = random.randint(1,2) # make head and tail equals to 1 or two if flip == 1: print(&quot;Head&quot;) else: print(&quot;Tail&quot;) . Tail .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/12/lesson3.14-3.15-blog.html",
            "relUrl": "/notebook/2022/12/12/lesson3.14-3.15-blog.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lesson Hack 3.12 3.13",
            "content": "Quiz Hack . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Procedure is part of a code that do a certain task. Parameter are variables that are used in the procedure. | . Paste a screenshot of completion of the quiz | Above | . Define Return Values and Output Parameters in your own words | Return values return procedure and output parameters gives you the parameter | . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | import math x = 10 def sqrt(x): return math.sqrt(x) print(sqrt(x)) . 3.1622776601683795 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Abstracted a program into separate functions is effective because it helps to reduce repeating code and it is easier to manage. | . Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | The program find the sum of x and y. | . x = 3 y = 5 def math(x, y): sum = x + y return sum print(math(x, y)) . 8 . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Procedure names are the names given to produce an output. Arguments are the data that is input into the function. | . Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | a=1 b=2 . Add . . . Subtract . . . Multiply . . . Divide . . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/12/lesson3.12-3.13-hack.html",
            "relUrl": "/notebook/2022/12/12/lesson3.12-3.13-hack.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lesson 3.14 3.15 hack",
            "content": "Hack 3.14.1 . This code returns you the number of ways to choose k items from n items without repetition and without order. . import math math.comb(12,10) . 66 . Hack 3.15.1 . Write a few lines of code that implements the import function | Define what an import random function do | It allows you to pick a random integer from a range. | List a few other things that we can import other than random | You can also import flask, NumPy, and TensorFlow | . import math num = input(&quot;what number do you want to square root?&quot;) squart = math.sqrt(int(num)) print(&quot;The root of&quot;,num,&quot;is&quot;,squart) . The root of 4 is 2.0 . Hack 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | It&#39;s any number greater than or equal to 12 and less than or equal to 20. | . import random landed_on = random.randint(1,10) if landed_on &lt;= 4: color = &quot;rice&quot; elif 4&lt;= landed_on &lt;= 6: color = &quot;noodle&quot; elif landed_on == 7: color = &quot;fruit&quot; elif landed_on == 10: color = &quot;pizza&quot; print(&quot;The food is&quot;, color) . The food is pizza .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/12/Lesson3.14-3.15-hack.html",
            "relUrl": "/notebook/2022/12/12/Lesson3.14-3.15-hack.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lesson 3.14 3.15 blog",
            "content": "Library . Library: a library is a collection of code from an external source that can be used to add functions to a program(It convenience writing programs). For example, math is a library that have function of math, one of the function is square root a number which is written in &quot;sqrt&quot;. | . Example of use of library . import math math.comb(12,10) . 66 . This code returns you the number of ways to choose k items from n items without repetition and without order. . Randomization . -The random library allows you to get a random number from a list, like rolling a dice. . For example, if you want to find a number from 1 to 10. . import random random.randint(1,10) . Different method of library . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . 3.15.2 . random (a,b) will give you a integer between a and b. | . Rolling coin example: . import random # choose either 1 or 2 flip = random.randint(1,2) # make head and tail equals to 1 or two if flip == 1: print(&quot;Head&quot;) else: print(&quot;Tail&quot;) . Tail .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/12/Lesson3.14-3.15-blog.html",
            "relUrl": "/notebook/2022/12/12/Lesson3.14-3.15-blog.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lesson 3.14 3.15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . 8.0 . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 8 . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . 14 . B. . import random sum = random.randint(1,18) print(sum) . 17 . C. . import random sum = 3*random.randint(1,6) print(sum) . 15 . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . 9 7 4 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . Heads . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? | . random(1,100) &lt;= 50 random(1,100) == 50 random(1,10) &lt;= 5 random(1,10) &gt;= 5 . The answer is A,C, and D! | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson3.14-3.15.html",
            "relUrl": "/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson3.14-3.15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Lesson 3.8 & 3.10 blog",
            "content": "Vocabulary . Iteration: a repeating part of an algorithm, repeats a certain time until the condition is met. | Iteration Statement: change the sequence of control by repeating a statement until condition met. | Repeating Until: if the condition is evaluate true, | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/10/lesson3.8-3.10-blog.html",
            "relUrl": "/notebook/2022/12/10/lesson3.8-3.10-blog.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lesson 3.5 & 3.7 blog",
            "content": "Vocabulary . Boolean: A denoting system of algebraic notation for represent logical propositions. . | Relational Operators: The mathematical relationship between two variables. . | Logical Operators: For example, and, or, not. . | Selection: The specific block of code that will execute. . | Algorithm: A finite set of instructions that accomplish a task. . | . Conditional Statement: One of the conditional statement is if statement, it affect the sequence of control. | . And are used to display the opposite. . Not are used to evaluate two condition at the same time. . Or are used to check if one of two condition is met. . Logical Operators example . sequence: Not, And, Or . bootSuccess = True result = not(bootSuccess) print(result) . False . num1 = 100 if num1 &gt;= 100 and num1 &lt; 200: print(&quot;The number satisfy&quot;) . The number satisfy . candy = 80 chocolate = 60 if candy &lt; 60 or chocolate &gt; 50: print(&quot;enough treats&quot;) . enough treats . Nested Conditional . It consist of conditional statements within conditional statements. | They are nested or included one inside another. For example, a if in a if statement is a nested conditional statement. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/09/lesson3.5-3.7-blog.html",
            "relUrl": "/notebook/2022/12/09/lesson3.5-3.7-blog.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Lesson 3.12 3.13 hack",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguments that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/12/08/Lesson3.12-3.13.html",
            "relUrl": "/2022/12/08/Lesson3.12-3.13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Lesson 3.12 3.13 hack",
            "content": "Quiz Hack . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Procedure is part of a code that do a certain task. Parameter are variables that are used in the procedure. | . Paste a screenshot of completion of the quiz | Above | . Define Return Values and Output Parameters in your own words | Return values return procedure and output parameters gives you the parameter | . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | import math x = 10 def sqrt(x): return math.sqrt(x) print(sqrt(x)) . 3.1622776601683795 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Abstracted a program into separate functions is effective because it helps to reduce repeating code and it is easier to manage. | . Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | The program find the sum of x and y. | . x = 3 y = 5 def math(x, y): sum = x + y return sum print(math(x, y)) . 8 . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Procedure names are the names given to produce an output. Arguments are the data that is input into the function. | . Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | a=1 b=2 . Add . . . Subtract . . . Multiply . . . Divide . . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/08/Lesson3.12-3.13-hack.html",
            "relUrl": "/notebook/2022/12/08/Lesson3.12-3.13-hack.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Lesson 3.12 3.13 blog",
            "content": "Notes . A procedure is a set of instructions that can take in parameters and give values. | . Quiz . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . You can determine function parameters and value and statements with syntax. | A return statement will exit the function and allow python to execute the program. Example:def divide(num1,num2): x = num1/num2 return x . | Function parameter are used when calling function for a result. | . Keyword . Modularity - breaking a complex program into smaller, independent parts, modules. | Abstraction - hiding the details of how a system works and exposing only the essential features. | Duplication - having multiple duplicate codes, decreasing efficiency. | Logic - the sequence of steps a computer follows to execute a program. | . Parameter . First define a function of variables. Ex: def add(x, y) | Define the &quot;action&quot; you want for the variable. Ex: result = x + y | For the rest of the program, you may use the &quot;action&quot; Ex: result = add(1, 2) returns you 3. | Modularity . Define a function, same as in the parameter. | Define the variable. | return you answer by the imported math library. | Shared Features . Create a function that is shared by multiple variables. | Instead of do two separate functions to do similar action, you can make a function that do the same action for both variable. | . Vocabulary: . Procedure - a module of code that is created to complete a task(a function). | Procedure Name - the name that is given to a function. | Parameters - a variable that is used in a function to import data. | Arguments - a way to provide information to a function, import with parameter. | . Collegeboard . Above, the function is defined as PROCEDURE. The function is then named with procName, the name of function as display. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. Block of statements are just things that you would place inside a function to complete a certain task, such as print(). . Javascript vs. Python . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Parameters . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . |",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/08/Lesson3.12-3.13-blog.html",
            "relUrl": "/notebook/2022/12/08/Lesson3.12-3.13-blog.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lesson 3.12 3.13 blog",
            "content": "Notes . A procedure is a set of instructions that can take in parameters and give values. | . Quiz . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . You can determine function parameters and value and statements with syntax. | A return statement will exit the function and allow python to execute the program. Example:def divide(num1,num2): x = num1/num2 return x . | Function parameter are used when calling function for a result. | . Keyword . Modularity - breaking a complex program into smaller, independent parts, modules. | Abstraction - hiding the details of how a system works and exposing only the essential features. | Duplication - having multiple duplicate codes, decreasing efficiency. | Logic - the sequence of steps a computer follows to execute a program. | . Parameter . First define a function of variables. Ex: def add(x, y) | Define the &quot;action&quot; you want for the variable. Ex: result = x + y | For the rest of the program, you may use the &quot;action&quot; Ex: result = add(1, 2) returns you 3. | Modularity . Define a function, same as in the parameter. | Define the variable. | return you answer by the imported math library. | Shared Features . Create a function that is shared by multiple variables. | Instead of do two separate functions to do similar action, you can make a function that do the same action for both variable. | . Vocabulary: . Procedure - a module of code that is created to complete a task(a function). | Procedure Name - the name that is given to a function. | Parameters - a variable that is used in a function to import data. | Arguments - a way to provide information to a function, import with parameter. | . Collegeboard . Above, the function is defined as PROCEDURE. The function is then named with procName, the name of function as display. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. Block of statements are just things that you would place inside a function to complete a certain task, such as print(). . Javascript vs. Python . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Parameters . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . |",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/08/Lesson-3.12-3.13-blog.html",
            "relUrl": "/notebook/2022/12/08/Lesson-3.12-3.13-blog.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 3.9 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;You failed&quot;) . What Grade Did You Get? You failed . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/trimester%202%20student%20teaching/2022/12/07/Lesson3.9-3.11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/07/Lesson3.9-3.11.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Lesson 3.9 3.11 hack",
            "content": "Hack 1 . Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? | It is important to know that algorithms looks different is because there will be a difference can make it wrong, even they looks the same. | for the converted conditional to boolean conversion | . isSolid = False isSoft = True if isSolid == True: print(&quot;Don&#39;t Eat it&quot;) else: if isLiquid == True: print(&quot;Eat it&quot;) else: print(&quot;Don&#39;t eat it&quot;) . Eat it . isSolid = False isSoft = True eatTime = not(isSolid) and isSoft if eatTime == False: print(&quot;Don&#39;t eat it&quot;) if eatTime == True: print(&quot;Eat it&quot;) . Eat it . Hack 2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language Working code of the same algorithm Incorporates selection AND/OR iteration Make it creative! . Input what show user is looking for | check if show is in show dictionary | If it is in dictionary, move onto step 4. If not, print &quot;not available&quot; | check if the show has a rating of 3 or higher | If it does, print &quot;recommended&quot;; if it doesn&#39;t print &quot;not recommended&quot; | itemdictionary = { &#39;item1&#39;:2, &#39;item3&#39;:3, &#39;item4&#39;:5, &#39;item5&#39;:1 } show = input(&quot;What item are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available&quot;) if showdictionary[show] &gt;= 2: print(&quot;recommended&quot;) else: print(&quot;not recommended&quot;) else: print(show + &quot; is not available&quot;) . 7 is not available . Hack 3 . Make a flow chart for the algorithm number guessing game. | Make a function that gets the user guess. | Modify the existing search function to give more encouraging feedback. | import random num_guesses = 0 user_input = -1 upper_bound = 10 lower_bound = 0 number = random.randint(0,10) print(&quot;Think a number between 0 and 100.&quot;) def guess(): num = input(&quot;Choose a number!&quot;) return num def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;You guessed too low&quot;) lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;You guessed too high&quot;) upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_input != number: user_input = guess() num_guesses += 1 print(f&quot;You guessed {user_input}.&quot;) lower_bound, upper_bound = search(number, user_input) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Think a number between 0 and 100. You guessed 8. You guessed too high Guess a number between 0 and 8. You guessed 5. You guessed too low Guess a number between 5 and 8. You guessed 6. You guessed too low Guess a number between 6 and 8. You guessed 7. You guessed the number in 4 guesses! . Hack 4 . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | It&#39;s 80, 74, and 96 | . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . C . | index = [12, 14, 43, 57, 79, 80, 99] index.sort() mid = int(len(index) / 2) print(&quot;middle is&quot;,index[mid]) . middle is 57 . index =[1, 12, 30, 43, 66, 74, 92] index.sort() mid = int(len(index) / 2) print(&quot;middle is&quot;,index[mid]) . middle is 43 . index = [7, 13, 33, 60, 84, 96, 111] index.sort() mid = int(len(index) / 2) print(&quot;middle is&quot;,index[mid]) . middle is 60 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/07/Lesson3.9-3.11-hack.html",
            "relUrl": "/notebook/2022/12/07/Lesson3.9-3.11-hack.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Lesson 3.9 3.11 blog",
            "content": "Algorithms . What are the component of algorithm . Selection | Sequence | Iteration | . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language . Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | simple existing algorithms can include . determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/07/Lesson3.9-3.11-blog.html",
            "relUrl": "/notebook/2022/12/07/Lesson3.9-3.11-blog.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(10): print(i) . 0 1 2 3 4 5 6 7 8 9 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration Iteration is a sequence of code being repeated until a specific end result is achieved. | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) When you are buying a flight ticket, you are gonna check if the price fit. If not, you will do the loop of continuous searching tickets until you find the best price. Then you are checking if the time fits, if not, search different flight until you find the best fit. | Program a simple iteration. | bid1 = int(input(&quot;What is your initial amount&quot;)) for i in range(0,100): if i &lt;= 100 . Input In [25] else: ^ SyntaxError: invalid syntax . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3.10.1 (Luna Iwazaki) . Section 10 - Lists . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . AP Exam Reference Sheet . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . APCSP Create Task . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | . Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] print(min(nums)) . 10 . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? Wrong What allows a value to be added at the end of a list? Wrong What allows an element at index i to be deleted from a list? Wrong What returns the number of elements currently in a specific list? Wrong 0.00% Your total score is: 0 out of 4. Its alright, better luck next time! . . . College Board Reference Sheets . List Operations . . &lt;/div&gt; .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/lesson%20plans/2022/12/06/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/2022/12/06/Unit_3.8_3.10.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Lesson 3.8 3.10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(10): print(i) . 0 1 2 3 4 5 6 7 8 9 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration Iteration is a sequence of code being repeated until a specific end result is achieved. | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) When you are buying a flight ticket, you are gonna check if the price fit. If not, you will do the loop of continuous searching tickets until you find the best price. Then you are checking if the time fits, if not, search different flight until you find the best fit. | Program a simple iteration. | bid1 = int(input(&quot;What is your initial amount&quot;)) for i in range(0,100): if i &lt;= 100 . Input In [25] else: ^ SyntaxError: invalid syntax . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3.10.1 (Luna Iwazaki) . Section 10 - Lists . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . AP Exam Reference Sheet . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . APCSP Create Task . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | . Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] print(min(nums)) . 10 . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? Wrong What allows a value to be added at the end of a list? Wrong What allows an element at index i to be deleted from a list? Wrong What returns the number of elements currently in a specific list? Wrong 0.00% Your total score is: 0 out of 4. Its alright, better luck next time! . . . College Board Reference Sheets . List Operations . . &lt;/div&gt; .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/lesson%20plans/2022/12/06/Lesson3.8-3.10.html",
            "relUrl": "/lesson%20plans/2022/12/06/Lesson3.8-3.10.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Lesson 3.8 & 3.10 blog",
            "content": "Vocabulary . Iteration: a repeating part of an algorithm, repeats a certain time until the condition is met. | Iteration Statement: change the sequence of control by repeating a statement until condition met. | Repeating Until: if the condition is evaluate true, | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/06/Lesson3.8-3.10-blog.html",
            "relUrl": "/notebook/2022/12/06/Lesson3.8-3.10-blog.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "lesson  hack 3.5",
            "content": "Hacks . Explain in your own words what each logical operator does | Not displays the opposite of the input,and evaluate two conditions in the same range at the same time, or evaluate two conditions in the different range at the same time. | Code your own scenario that makes sense for each logical operator | . Not . haveDinner = True result = not(haveDinner) print(result) . False . And . money = 163 if money &gt; 75 and money &lt;= 170: print(&quot;You have enough money&quot;) . You have enough money . Or . item = 1 money = 25 if item &lt;= 0 or money &gt; 20: print(&quot;you can afford it&quot;) . you can afford it . Challenge Level 1 . myList = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;] letter1 = str(input(&quot;Which letter do you want to find?&quot;)) index = myList.index(letter1) print(&quot;The lettter&quot;, letter1, &quot;is the&quot;, index, &quot;number&quot;) . The lettter u is the 4 number . Question 1 . The output will be changed . Question 2 . Total will be 10. The price will be 15 after one year. . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. I don&#39;t know how to do this | Make piece of code that gives three different recommendations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/05/lesson-3.5_3.7-hack.html",
            "relUrl": "/notebook/2022/12/05/lesson-3.5_3.7-hack.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lessons 3.8 3.10 hack",
            "content": "Define an Iteration Iteration is a sequence of code being repeated until a specific end result is achieved. | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) When you are buying a flight ticket, you are gonna check if the price fit. If not, you will do the loop of continuous searching tickets until you find the best price. Then you are checking if the time fits, if not, search different flight until you find the best fit. | Program a simple iteration. | bid1 = int(input(&quot;What is your initial amount&quot;)) while bid1 &lt; 100: print(bid1, &quot;is not enought&quot;) bid1 = int(input(&quot;try another amount&quot;)) if bid1 &gt;= 100: print(&quot;The amount&quot;, bid1, &quot;is enough&quot;) . 2 is not enought 34 is not enought 18 is not enought The amount 100 is enough . What is an iteration statement, in your own words? Iteration statement cause statement to run more times and break when it achieve the ideal result. | Create a descending list of numbers using for loop . | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 . | myList = [4, 2, 7, 3, 9, 0] myList.sort(reverse = True) print((myList)) . [9, 7, 4, 3, 2, 0] . i = 3 while i &lt;= 81: print(i) i += 13 . 3 16 29 42 55 68 81 . Find the minimum in a list . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] print(min(nums)) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? index() Correct! What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows an element at index i to be deleted from a list? remove() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/05/Lesson3.8-3.10-hack.html",
            "relUrl": "/notebook/2022/12/05/Lesson3.8-3.10-hack.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Lesson 3.5 3.7 hack",
            "content": "Hacks . Explain in your own words what each logical operator does | Not displays the opposite of the input,and evaluate two conditions in the same range at the same time, or evaluate two conditions in the different range at the same time. | Code your own scenario that makes sense for each logical operator | . Not . haveDinner = True result = not(haveDinner) print(result) . False . And . money = 163 if money &gt; 75 and money &lt;= 170: print(&quot;You have enough money&quot;) . You have enough money . Or . item = 1 money = 25 if item &lt;= 0 or money &gt; 20: print(&quot;you can afford it&quot;) . you can afford it . Challenge Level 1 . myList = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;] letter1 = str(input(&quot;Which letter do you want to find?&quot;)) index = myList.index(letter1) print(&quot;The lettter&quot;, letter1, &quot;is the&quot;, index, &quot;number&quot;) . The lettter u is the 4 number . Question 1 . The output will be changed . Question 2 . Total will be 10. The price will be 15 after one year. . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. I don&#39;t know how to do this | Make piece of code that gives three different recommendations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/05/Lesson3.5_3.7-hack.html",
            "relUrl": "/notebook/2022/12/05/Lesson3.5_3.7-hack.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "LESSON PLAN",
            "content": "Lesson 3.5 Finn/Jake . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | A boolean expresions are either true or false. | Testing if two numbers or variables are equal is a common example. | For example: The sky is blue = True | What do we use to represent them? (Hint think of how domain/range of graph is answered) | How is binary related to this? | How could this be used when asked a question? | . Examples (Not part of homework) . Type the code down below for these two example . Try to make a statement that determines if a variable &quot;score&quot; is equal to the number 3 | Try to make this score variable have an output if it equals 3 | . # The code for ex:1 # The code for ex:2 . Relational Operators . The mathmatical relationship between two variables | Determines an output on whether or not the statement is true | a=b, a&gt;b, etc. | . Examples (Not part of homework) . Type the code down below for these two example . You have to be the age of 16 or older to drive | Each rollercoaster cart holds 4 for people per cart | . # Put the code for ex:1 # Put the code for ex:2 . Logical Operators . NOT . NOT, it displays the opposite of whatever the data is. Mainly used for true/false, and does not effect the variable. | . isRaining = False result = not(isRaining) print(result) . True . AND . AND, used to evaulte two conditions together and determine if both condintions are met | . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . OR . OR, when using or the function only looks to see if one of the conditions is met then will | . lives = 1 score = 21 if lives &lt;= 0 or score &gt; 20: print(&quot;end game&quot;) . end game . Hacks . Explain in your own words what each logical operator does | Code your own scenario that makes sense for each logical operator | . Conditionals . Paaras Purohit and Shruthi Damodar . title: Conditionals | toc: true | categories: [tri2lesson] | permalink: /conditionals | tags: [tri2lesson] | . Learning Objectives / Some Things You Might Want to Keep Note Of . Conditionals allow for the expression of algorithms that utilize selection without a programming language. | Writing conditional statements is key to computer science. | Determine the result of conditional statements | . Key Terms . Selection: The specific block of code that will execute depending on the algorithm condition returning true or false. | Algorithm: &quot;A finite set of instructions that accomplish a specific task.&quot; | Conditional Statement / If-Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . Conditional Statements in JavaScript . Below is an example of an algorithm in JavaScript that uses selection: . function isEven(parameter) { if (parameter % 2 == 0) { console.log(&quot;The number is even.&quot;); } else if (parameter % 2 != 0) { console.log(&quot;The number is odd.&quot;) } } isEven(4) . Cell In[23], line 1 function isEven(parameter) { ^ SyntaxError: invalid syntax . A computer science student such as yourself will see conditional statements in JavaScript a lot. Below is an example of one in action: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } . Cell In[5], line 1 if (30 == 7) { ^ SyntaxError: invalid syntax . That is one conditional statement, but this algorithm is too simple to have anything done with it. Below is an algorithm building on the previous algorithm: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Cell In[21], line 1 if (30 == 7) { ^ SyntaxError: invalid syntax . Conditional statements can be used for many a purpose. The algorithm above was quite simple, but conditionals can be found in more complex algorithms. . Binary Numbers . Let&#39;s do some truth tables! . Speed round . Challenges . Challenges Related to the Lesson That I Solved Myself . Note: I did these in Python . Level I: Vowel Count . Return the number (count) of vowels in the given string. We will consider a, e, i, o, u as vowels for this challenge (but not y). The input string will only consist of lower case letters and/or spaces. . Hint: If you use a lot of if-statements and there are more than one outcome, that is to be expected. If not, don&#39;t panic, just keep trying. . Level II: Who Likes It? . You probably know the &quot;like&quot; system from Facebook and other pages. People can &quot;like&quot; blog posts, pictures or other items. We want to create the text that should be displayed next to such an item. . Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples: . [] --&gt; &quot;no one likes this&quot; . [&quot;Peter&quot;] --&gt; &quot;Peter likes this&quot; . [&quot;Jacob&quot;, &quot;Alex&quot;] --&gt; &quot;Jacob and Alex like this&quot; . [&quot;Max&quot;, &quot;John&quot;, &quot;Mark&quot;] --&gt; &quot;Max, John and Mark like this&quot; . [&quot;Alex&quot;, &quot;Jacob&quot;, &quot;Mark&quot;, &quot;Max&quot;] --&gt; &quot;Alex, Jacob and 2 others like this&quot; . Note: For 4 or more names, the number in &quot;and 2 others&quot; simply increases. . Hint: This requires you to combine knowledge on lists along with the conditionals you learned in this lesson. . Level III: Mutliples of 3 or 5 . If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them). . Note: If the number is a multiple of both 3 and 5, only count it once. . Hint: What do you know about for loops? Since your code incorporates a list of numbers from 1 to the max number, can you use for loops along with conditionals? . Level IV: Likes vs. Dislikes . YouTube had a like and a dislike button, which allowed users to express their opinions about particular content. It was set up in such a way that you cannot like and dislike a video at the same time. There are two other interesting rules to be noted about the interface: Pressing a button, which is already active, will undo your press. If you press the like button after pressing the dislike button, the like button overwrites the previous &quot;Dislike&quot; state. The same is true for the other way round. . Create a function that takes in a list of button inputs and returns the final state. . Examples: . /* like_or_dislike([Dislike]) ➞ Dislike like_or_dislike([Like, Like]) ➞ Nothing like_or_dislike([Dislike, Like]) ➞ Like like_or_dislike([Like, Dislike, Dislike]) ➞ Nothing */ . Notes . If no button is currently active, return Nothing. | If the list is empty, return Nothing. | . Hint: This is like level III, but harder, so don&#39;t give up! . Level V: Find the Odd Number . Given an array of integers, find the one that appears an odd number of times. . There will always be only one integer that appears an odd number of times. . Examples: . [7] should return 7, because it occurs 1 time (which is odd). . [0] should return 0, because it occurs 1 time (which is odd). . [1,1,2] should return 2, because it occurs 1 time (which is odd). . [0,1,0,1,0] should return 0, because it occurs 3 times (which is odd). . [1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd). . Hint: This is by far the hardest challenge out of all of these, in my opinion, and it took me about 3 or 4 months to solve this one. . Hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | 1 extra point for each challenge that you program or pair program. | 0.5 points for your review ticket looking nice, or you convincing me that it does. | 1 point for each and any extra work you do that helps show your understanding of conditionals. | . Lesson 3.7 James . Nested Conditionals . Nested conditional statements consist of conditional statements within conditional statements | they&#39;re nested one inside the other | An else if inside of another else if | Can be used for a varying amount of &quot;else if statements.&quot; The first if statement can represent if two coditions are true. The first else if can represent if only one or the other is true. The last else if represents if neither of the conditions are true. | Can have three different conditions | . Take aways . Learn how to determine the result of nested condtional statements | Nested conditional statements consist of conditional statements within conditional statements | One condition leads to check in a second condition | . Writing Nested Conditional Statements . Can be planned and writen out first | Flow chart is a possibility. Ask a question. If the statement is false end the flowchart with one result. If it is true then repeat the process once more. | If (condition 1) | { first block of statements | . | } | else | { IF (condition 2) | { second block of statements | . | } | . | } | . this statement is false make a new result. Finally if the statement is true make a final result . Question 1 . Look at the following code . what happens when x is 5 and y becomes 4? Is the output same or change? | . x = 2 y = 3 if x == y: print(&quot;x and y are equal&quot;) else: if x &gt; y: print(&quot;x is bigger than y&quot;) elif x &lt; y: print(&quot;x is smaller than y&quot;) . Question 2 . How much it will be cost when the height will be 60, age is 17, and photo taken? | when this person came after 1 year how much it will be cost? | . height = int(input(&quot;Welcom to the rollercoaster! nWhat is your height in Inch? &quot;)) age = int(input(&quot;What is your age?&quot;)) if height &lt; 48 : print(&quot;Can&#39;t ride&quot;) elif age &lt; 12 : photo = input(&quot;Adult tickets are $5 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $8.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $5.&quot;) elif age &lt; 18: photo = input(&quot;Adult tickets are $7 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $10.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $7.&quot;) else : photo = input(&quot;Adult tickets are $12 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $15.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $12.&quot;) . The total bill is $15. . Let&#39;s look at Examples . import random global i game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[i] == gamer: break else: i += 1 if randomNumber == i: print(&quot;You win&quot;) else: if randomNumber == (i+1)%3: print(&quot;Lose&quot;) elif randomNumber == (i+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart() randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart() . rock scissor . UnboundLocalError Traceback (most recent call last) Cell In[9], line 30 28 else: 29 print(&#34;Goodbye&#34;) &gt; 30 gameStart() Cell In[9], line 13, in gameStart() 11 print(randomOne) 12 while True: &gt; 13 if winning[i] == gamer: 14 break 15 else: UnboundLocalError: local variable &#39;i&#39; referenced before assignment . . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . 4 +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | . Rubric for hacks: . Each section is worth .33 and you will get + 0.01 if all are completed to have full points. | . How to get a .33 . All hacks are done for the section, fully completed. | . How to get a .30 . Not all hacks are done in the section | . Below a .30 . Sections are missing/incomplete | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/tri2lesson/2022/12/05/Lesson3.5-3.7.html",
            "relUrl": "/tri2lesson/2022/12/05/Lesson3.5-3.7.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Lesson 3.5 3.7 blog",
            "content": "Vocabulary . Boolean: A denoting system of algebraic notation for represent logical propositions. . | Relational Operators: The mathematical relationship between two variables. . | Logical Operators: For example, and, or, not. . | Selection: The specific block of code that will execute. . | Algorithm: A finite set of instructions that accomplish a task. . | . Conditional Statement: One of the conditional statement is if statement, it affect the sequence of control. | . And are used to display the opposite. . Not are used to evaluate two condition at the same time. . Or are used to check if one of two condition is met. . Logical Operators example . sequence: Not, And, Or . bootSuccess = True result = not(bootSuccess) print(result) . False . num1 = 100 if num1 &gt;= 100 and num1 &lt; 200: print(&quot;The number satisfy&quot;) . The number satisfy . candy = 80 chocolate = 60 if candy &lt; 60 or chocolate &gt; 50: print(&quot;enough treats&quot;) . enough treats . Nested Conditional . It consist of conditional statements within conditional statements. | They are nested or included one inside another. For example, a if in a if statement is a nested conditional statement. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/05/Lesson3.5-3.7-blog.html",
            "relUrl": "/notebook/2022/12/05/Lesson3.5-3.7-blog.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "lesson hack 3.8",
            "content": "Define an Iteration Iteration is a sequence of code being repeated until a specific end result is achieved. | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) When you are buying a flight ticket, you are gonna check if the price fit. If not, you will do the loop of continuous searching tickets until you find the best price. Then you are checking if the time fits, if not, search different flight until you find the best fit. | Program a simple iteration. | bid1 = int(input(&quot;What is your initial amount&quot;)) while bid1 &lt; 100: print(bid1, &quot;is not enought&quot;) bid1 = int(input(&quot;try another amount&quot;)) if bid1 &gt;= 100: print(&quot;The amount&quot;, bid1, &quot;is enough&quot;) . 2 is not enought 34 is not enought 18 is not enought The amount 100 is enough . What is an iteration statement, in your own words? Iteration statement cause statement to run more times and break when it achieve the ideal result. | Create a descending list of numbers using for loop . | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 . | myList = [4, 2, 7, 3, 9, 0] myList.sort(reverse = True) print((myList)) . [9, 7, 4, 3, 2, 0] . i = 3 while i &lt;= 81: print(i) i += 13 . 3 16 29 42 55 68 81 . Find the minimum in a list . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] print(min(nums)) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? index() Correct! What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows an element at index i to be deleted from a list? remove() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/notebook/2022/12/05/3.8-3.10-hack.html",
            "relUrl": "/notebook/2022/12/05/3.8-3.10-hack.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguments that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3.1-3.2 Hack",
            "content": "Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | Assignment operator assign values to variables. | In Collegeboard pseudocode, what symbol is used to assign values to variables? | Arrows like &quot;num1 → 3&quot; | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | 22 | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . &lt;/p&gt; Prev Next Define variable | It&#39;s a placeholder in your program for a value | It&#39;s also a variable is a named unit of data that can be assigned a value | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hacks . Questions . What is a list? Lists are sequences of elements with each element being a variable. | What is an element? Elements are the strings that are going to print. | What is an easy way to reference the elements in a list or string? With a bracket | What is an example of a string? Name, id, anything that is a letter, number, or words. | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . shoppingList = [&quot;lemon&quot;, &quot;vegetable&quot;, &quot;candy&quot;, &quot;chip&quot;, &quot;meat&quot;, &quot;rice&quot;] print(shoppingList[-4]) . candy . Hacks . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [1, 2, 3] . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, antony running /home/antony/anaconda3/bin/python You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! antony you scored 3/4 . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In ordere to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Steven&quot; name2 = &quot;Mike&quot; name3 = &quot;Jack&quot; name4 = &quot;Ava&quot; name5 = &quot;Olivia&quot; name = [name1, name2, name3, name4, name5] # slow way print(name1, name2, name3, name4, name5) # fast way print(name) . Steven Mike Jack Ava Olivia [&#39;Steven&#39;, &#39;Mike&#39;, &#39;Jack&#39;, &#39;Ava&#39;, &#39;Olivia&#39;] . name = [&quot;chicken&quot;,&quot;bread&quot;,&quot;milk&quot;,&quot;cream&quot;,&quot;soda&quot;] print(name[2]) print(name[-1]) . milk soda . &lt;/div&gt; .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/jupyter/python/2022/12/02/Lesson3.1-3.2-hacks.html",
            "relUrl": "/jupyter/python/2022/12/02/Lesson3.1-3.2-hacks.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;You failed&quot;) . What Grade Did You Get? You failed . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/trimester%202%20student%20teaching/2022/12/02/Lesson-3.9-3.11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/02/Lesson-3.9-3.11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Unit 3.1-3.2 Hack",
            "content": "Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | Assignment operator assign values to variables. | In Collegeboard pseudocode, what symbol is used to assign values to variables? | Arrows like &quot;num1 → 3&quot; | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | 22 | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . &lt;/p&gt; Prev Next Define variable | It&#39;s a placeholder in your program for a value | It&#39;s also a variable is a named unit of data that can be assigned a value | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hacks . Questions . What is a list? Lists are sequences of elements with each element being a variable. | What is an element? Elements are the strings that are going to print. | What is an easy way to reference the elements in a list or string? With a bracket | What is an example of a string? Name, id, anything that is a letter, number, or words. | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . shoppingList = [&quot;lemon&quot;, &quot;vegetable&quot;, &quot;candy&quot;, &quot;chip&quot;, &quot;meat&quot;, &quot;rice&quot;] print(shoppingList[-4]) . candy . Hacks . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [1, 2, 3] . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, antony running /home/antony/anaconda3/bin/python You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! antony you scored 3/4 . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In ordere to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Steven&quot; name2 = &quot;Mike&quot; name3 = &quot;Jack&quot; name4 = &quot;Ava&quot; name5 = &quot;Olivia&quot; name = [name1, name2, name3, name4, name5] # slow way print(name1, name2, name3, name4, name5) # fast way print(name) . Steven Mike Jack Ava Olivia [&#39;Steven&#39;, &#39;Mike&#39;, &#39;Jack&#39;, &#39;Ava&#39;, &#39;Olivia&#39;] . name = [&quot;chicken&quot;,&quot;bread&quot;,&quot;milk&quot;,&quot;cream&quot;,&quot;soda&quot;] print(name[2]) print(name[-1]) . milk soda . &lt;/div&gt; .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/jupyter/python/2022/12/02/Lesson-3.1-3.2-hacks.html",
            "relUrl": "/jupyter/python/2022/12/02/Lesson-3.1-3.2-hacks.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3.1-3.2",
            "content": "Unit 3, Section 1.1: Data Types and Variables - Ederick . Essential Knowledge (College Board&#39;s Must Knows): . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than antoher. | . What is a Variable? . A variable is an abstraction made inside a program that holds a value. These variables are used in code to refer to more comples values that the variable contains and makes the program code more organized and smoother to run. . Variables can be seen as &quot;containers&quot; and each container has a name that holds what it is supposed to hold. In the following code, we can see that a variable has the value of &quot;Alex.&quot; How can we make the variable appear more organized in the code? . x = &quot;alex&quot; print(x) . alex . Choosing Variables . When choosing variables, it is important to assign the variables name to something that correlates with what the function of the variable is supposed to do. For example, we do not want a variable that is supposed to hold a name be named &quot;age&quot; becaue it can be confusing and mistakes may be more prevalent. . Example: . age = &quot;Timmy&quot; name = &quot;25&quot; print(name + &quot; is &quot; + age) . 25 is Timmy . Notice how age is going to be seen when printing the code. That can lead to confusion | . Data Types . Variables have different data types that store specific kinds of data depending on what is being represented. Some examples are shown below: . integer (numbers) | string (or text/letters) | Boolean (True/False statements) | . These types of data types can be useful when trying to represent a value. For example, you would not want a variable meant to represent someone&#39;s name with an integer. . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | What is the best data type to represent someone&#39;s dog&#39;s name? | Why is it important to give variables specific names before containing values? | What is the best way to represent someone&#39;s phone number? | Bonus (Not required but important to know): . How can we update a variable&#39;s value | What function is used to recieve a user&#39;s input? | Variables (3.1.2) - Noor . Learning objective for 3.1.2: . Determine the value of a variable as a result of an assignment . done through looking at how we can use the assignment operator | . Note: . Collegeboard uses &lt;-- as the assignment operator . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . How do you even store a value inside a variable? . Let&#39;s use python for our example: . In python, the assignment operator is the equal sign (=) | In order to store a value inside a variable, we must: Give the variable a name | place the assignment operator | input the variable value | . | . highscore = 100 # How do you store a number like 3.72? money = 3.72 # What about storing your username (string)? username = &quot;name&quot; # What if it is raining outside and you want to store that fact (boolean)? is_raining = True # What about a list of groceries? groceries = [&quot;eggs&quot;, &quot;flour&quot;, &quot;bread&quot;, &quot;milk&quot;] . Lets Look at an Example: . x = 10 y = 20 z = 30 x = y z = x # what do you think z will be? print(z) . 20 . Let&#39;s get a little more practical here . Imagine that you are making a calendar and have just finished the html code that is needed: . You now want to be able to switch between the months of the year by using the &quot;next&quot; or &quot;prev&quot; buttons you will need to take the html elements and use them to your advantage but how? | . | . | . &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button class=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // to make our lives a little easier, we can store the div next and prev into variables // this way we don&#39;t need to type out as much // Note: You CAN just add the event listener to document.querySelector(.next) or prev and get the same desired outcome nextButton = document.querySelector(.next) prevButton = document.querySelector(.prev) // we can go make the buttons functional by adding an addeventlistner to them &lt;/script&gt; . Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | Assignment operator assign values to variables. | In Collegeboard pseudocode, what symbol is used to assign values to variables? | Arrows like &quot;num1 → 3&quot; | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | 22 | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . Bonus (optional): . There&#39;s more than one way to define the variable. List two ways to do it. . Rubric . For .15: . Student has followed directions properly and has the converter working | . For .18: . Student has completed some of the bonus material alongside requirement for 2.7 | . For .20: . Student has completed all of the material, answered thoughtfully, and met requirements for 2.7 | . List and Strings Using Variables- Nathan . Strings . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. . The following are all examples of strings being used in code, in this case, within print functions. . print(&quot;hello world&quot;) print(&#39;hello&#39;) . hello world hello . Lists . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . Features of Lists . The elements within the list can be accessed by index. | Can store various elements | The list is in order | . Example of a list . thanksgivingList = [&quot;cranberry pie&quot;, &quot;casserole&quot;, &quot;mashed potatoes&quot;, &quot;turkey&quot;] print(thanksgivingList) . [&#39;cranberry pie&#39;, &#39;casserole&#39;, &#39;mashed potatoes&#39;, &#39;turkey&#39;] . List Index . An index is an element of a string. Indices typically start with 0, but Collegeboard has the index start at 1. . print(thanksgivingList[1]) #In this case, the index starts at 0, but in collegeboard, the index starts at 1 print(thanksgivingList[-3]) #Python can index from the end, in this case, &quot;turkey&quot; would be index -1 and 3. . casserole casserole . Hacks . Questions . What is a list? | What is an element | What is an easy way to reference the elements in a list or string? | What is an example of a string? | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . Rubric . Creating a list . Shows great knowledge in creating lists | . Indexing . Is able to index both from the start and from the end | . Data Abstraction with Lists - Steven . Data abstraction can be created with lists. . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . In the code below, the logic itself works with a list, but the code abstracts it into a sequence of bits in a string (as seen in the input and output). To make this work, the splitbits lists is created and processed. At the end of the code, the result is outputted as a string rather than a list (abstraction). . bits = input(&quot;Input a sequence of bits to invert: &quot;) splitbits = list(bits) for i in range(len(splitbits)): if splitbits[i] == &#39;0&#39;: splitbits[i] = &#39;1&#39; elif splitbits[i] == &#39;1&#39;: splitbits[i] = &#39;0&#39; print(&quot;&quot;.join(splitbits)) . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . The following provides a rubric for my hacks (scored out of 0.20) . 0.20 - Fully functioning data abstraction with a list | 0.10 - not functioning, but attempt at making a list | 0.00 - not functioning, no evidence of attempt based upon the guidelines | . Managing Complexity with lists - Liav . Long and slow way . By now, everyone should know the &quot;long and slow way&quot; to print a list of something in python It is easy to just assign a value to a single variable | This method is displayed in this example with test scores: | . | . score1 = 95 score2 = 24 score3 = 87 score4 = 92 print(score1, score2, score3, score4) . As you can see, each score is assigned to its relative variable such as &quot;score1 = 95&quot; and then you just print each variable. | However you can make the code segment faster, easier to read, and more efficient... | . Assinging values to one variable . Use square brackets &quot;[]&quot; to store the values of a certain variable, then you can simply print the variable to output your desired list: | . scores = [95, 24, 87, 92] print(scores) . Now instead of having a difference variable and new line of code for each value, the list is simply displayed by assigning each value to a single value that you can now print. | . How lists manage complexity of a program . Simplification . It is much simpler, faster, and easier to code lists this way | Makes the code segment much easier to read | . | Variables . You do not need as many variables, because you can just assign all corresponding values to a single variable | To change a value you don&#39;t have to edit/add/remove an entire variable | . | . Python Quiz . Now everyone should take this short python quiz and screenshot your score. | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Simplify Foods List . Now simplify this foods list using what you have learned | . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In ordere to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/jupyter/python/2022/11/28/Lesson3.1-3.2.html",
            "relUrl": "/jupyter/python/2022/11/28/Lesson3.1-3.2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Binary Math",
            "content": "| Overview | Binary | . Binary Math with Conversions . Shift Left Plus Binary Octal Hexadecimal Decimal Minus Shift Right . +1 | +1 | 00000000 | 0 | 0 | 0 | -1 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "College Board Final",
            "content": "",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/11/10/college-board-final.html",
            "relUrl": "/2022/11/10/college-board-final.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 15 0 If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime. haha: 15 boohoo: 3 Most jeered 6 8 Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10. haha: 13 boohoo: 6 Random joke 13 Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC. haha: 7 boohoo: 4 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Internet Notes",
            "content": "A computing device is a physical artifact that can run a program. . Computers are capable of sending and receiving data . A packet is a small amount of data and sent over a network. . A computer network is a group of interconnected computing devices capable of sending or receiving data. . Examples . Packet switching. Files broken up into packet and sent in any order. the packets are reassembled by the recipient’s device. . . The path is the path between two computer and the router will guild the path. . Bandwidth . The bandwidth is the max amount of data that can be sent in fixed amount of time. (Speed of data transmission) . . Computer Protocol Models . Application . HTTP, DNS . Transport . TCP, UDP . Internet . IP . Network Access . Datalink, fiber, MAC, ethernet, NIC, wire . The Scalability of the Internet . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/10/13/Internet-Note.html",
            "relUrl": "/markdown/2022/10/13/Internet-Note.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Identifying and correct error",
            "content": "Essential Knowledge . A logic error is a mistake in the algorithm or program that causes it to behave incorrectly or unexpectedly. . A syntax error is a mistake in the program where the rules of the programming language are not followed. . A run-time error is a mistake in the program that occurs during the execution of a program. . An overflow error is an error that occurs when a computer attempts to handle a number that is outside of the defined range of values. . Errors and programming go hand in hand . Programmers are constantly running into errors when they program . In fact, it is an expectation that errors are a part of the programming process. . Proficient programmers can identify errors as one of the following types: . logic error, syntax error, runtime error, overflow error. . Logic Error . Logic error is caused by the programmer making a mistake in the algorithm which causes by program to behave unexpectedly . . . Syntax Error . This is a mistake when a programmer makes a typo or writes some code that doesn’t follow the rule of the language. . Syntax errors cause the program to fail to run. . Examples of forgetting to include . colon/semicolon, parenthesis, surly braces, indentation, quotes, variable definition. . Quiz Result . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/10/10/Identify-and-correct-error.html",
            "relUrl": "/markdown/2022/10/10/Identify-and-correct-error.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "API",
            "content": "import requests url = &quot;https://dnaber-languagetool.p.rapidapi.com/v2/languages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;abbfe3759emsh2b005c6f0664e48p143368jsna2d7e6d7bfa7&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dnaber-languagetool.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) for row in response.json(): print(row[&quot;name&quot;]) print(&quot; t&quot;, row[&quot;code&quot;]) . Arabic ar Asturian ast Belarusian be Breton br Catalan ca Catalan (Valencian) ca Chinese zh Danish da Dutch nl Dutch nl Dutch (Belgium) nl English en English en English (Australian) en English (Australian) en English (Canadian) en English (Canadian) en English (GB) en English (GB) en English (New Zealand) en English (New Zealand) en English (South African) en English (South African) en English (US) en English (US) en Esperanto eo French fr French fr Galician gl German de German de German (Austria) de German (Austria) de German (Germany) de German (Germany) de German (Swiss) de German (Swiss) de Greek el Irish ga Italian it Japanese ja Khmer km Norwegian (Bokmål) nb Norwegian (Bokmål) no Persian fa Polish pl Portuguese pt Portuguese (Angola preAO) pt Portuguese (Angola preAO) pt Portuguese (Brazil) pt Portuguese (Brazil) pt Portuguese (Moçambique preAO) pt Portuguese (Moçambique preAO) pt Portuguese (Portugal) pt Portuguese (Portugal) pt Romanian ro Russian ru Simple German de-DE-x-simple-language Slovak sk Slovenian sl Spanish es Spanish es Spanish (voseo) es Swedish sv Tagalog tl Tamil ta Ukrainian uk . from requests.api import head url = &#39;http://api.coincap.io/v2/assets&#39; headers = { &#39;Accept&#39;: &#39;applocation/json&#39;, &#39;Content-Type&#39;: &#39;application/json&#39; } response = requests.request(&quot;GET&quot;, url,headers=headers,data=[]) myjson = response.json() ourdata =[] csvheader = [&#39;SYMBOL&#39;,&#39;NAME&#39;,&#39;PRICE(USD)&#39;] for x in myjson[&#39;data&#39;]: listing = [x[&#39;symbol&#39;],x[&#39;name&#39;],x[&#39;priceUsd&#39;]] ourdata.append(listing) with open(&#39;crypto.csv&#39;,&#39;w&#39;,encoding=&#39;UTF8&#39;, newline=&#39;&#39;) as f: writer = csv.writer(f) writer.writerow(csvheader) writer.writerows(ourdata) print(&#39;done&#39;) . done . Printing Result . BTC,Bitcoin,19551.7573349886725385 ETH,Ethereum,1327.4250215458156583 USDT,Tether,1.0007231159173512 BNB,BNB,275.2378103405078029 USDC,USD Coin,1.0004014724499830 BUSD,Binance USD,1.0010039270109153 XRP,XRP,0.4738101150422375 ADA,Cardano,0.3714413273866222 SOL,Solana,30.8296108226191153 LUNA,Terra,2.6286894240676789 DOGE,Dogecoin,0.0596404400247591 MATIC,Polygon,0.8361919692770591 DOT,Polkadot,6.2257071658147368 DAI,Multi Collateral DAI,1.0006931981104363 TRX,TRON,0.0628542143560065 SHIB,Shiba Inu,0.0000103240441570 UNI,Uniswap,6.4005054806676390 WBTC,Wrapped Bitcoin,19556.9959822061050022 AVAX,Avalanche,16.0685426804361827 STETH,Lido Staked ETH,1295.9467656263442015 LEO,UNUS SED LEO,4.4934788161355942 LTC,Litecoin,51.7899841877158520 LINK,Chainlink,7.2402999572646960 ETC,Ethereum Classic,23.7263318896015916 FTT,FTX Token,24.0904869708050457 ATOM,Cosmos,12.3389480594481796 XLM,Stellar,0.1140403600790443 CRO,Crypto.com Coin,0.1100610507066726 XMR,Monero,144.4595680742639079 NEAR,NEAR Protocol,3.0317821357336188 ALGO,Algorand,0.3297882383766017 QNT,Quant,191.5792263451579018 BCH,Bitcoin Cash,110.1531719025812279 BTCB,Bitcoin BEP2,19538.2153141506836598 VET,VeChain,0.0231503881215050 FLOW,Flow,1.5314519915407031 FIL,Filecoin,5.2460645355906141 FRAX,Frax,1.0016813087078886 ICP,Internet Computer,5.0676655340722020 EGLD,Elrond,56.3533574256806574 XTZ,Tezos,1.3837369233719541 HT,Huobi Token,7.9252897815741030 MANA,Decentraland,0.6447337858273898 SAND,The Sandbox,0.7844414580172317 AAVE,Aave,79.2623914308692159 CHZ,Chiliz,0.1849152959131848 MKR,Maker,1110.4230585081890419 EOS,EOS,1.0534582247747812 THETA,THETA,1.0073344077338211 OKB,OKB,16.7357871105948642 KCS,KuCoin Token,9.8745082237806356 BSV,Bitcoin SV,48.8058995848742793 USDP,Pax Dollar,0.9863126517384367 AXS,Axie Infinity,11.1501312547382343 HBAR,Hedera Hashgraph,0.0619954334197640 TUSD,TrueUSD,1.0009177275940238 ZEC,Zcash,53.2831658048112177 XEC,eCash,0.0000379777516647 MIOTA,IOTA,0.2553373684816746 CAKE,PancakeSwap,4.6261673533285196 GRT,The Graph,0.0866282006835812 HNT,Helium,4.5442970290155652 NEO,Neo,8.0021900156653787 SNX,Synthetix,2.3228864183497292 FTM,Fantom,0.2102246384493305 PAXG,PAX Gold,1644.4094733083955492 RUNE,THORChain,1.5282435243374619 CSPR,Casper,0.0476674556879436 NEXO,Nexo,0.8832896052083875 GT,GateToken,4.4557623764754065 CRV,Curve DAO Token,0.8921825633649859 LDO,Lido DAO,1.4772088170539759 DASH,Dash,41.8343708638219334 TWT,Trust Wallet Token,1.0933760810847815 KLAY,Klaytn,0.1431735645306835 ENJ,Enjin Coin,0.4354700786242877 BAT,Basic Attention Token,0.2878496845537534 ZIL,Zilliqa,0.0311437068099592 STX,Stacks,0.3102923018272279 MINA,Mina,0.5673835124604605 KAVA,Kava,1.4136802712115050 COMP,Compound,54.5009088022327804 FEI,Fei Protocol,0.9283069925471570 DCR,Decred,27.1466698320543600 WAVES,Waves,3.5083690076320213 CVX,Convex Finance,5.5986986092061085 USTC,TerraClassicUSD,0.0382145299775303 XDC,XinFin Network,0.0302876969401718 RVN,Ravencoin,0.0311956315613949 1INCH,1inch Network,0.5734060742808990 CELO,Celo,0.7520419817182903 XEM,NEM,0.0389918604697539 LRC,Loopring,0.2625339752287427 HOT,Holo,0.0020048162148176 AR,Arweave,10.0088639233514767 BTG,Bitcoin Gold,18.4848350653923686 KSM,Kusama,37.7614911731186198 BNX,BinaryX,149.4011303545838540 GUSD,Gemini Dollar,0.9988280593811273 DFI,DeFiChain,0.5870285501330909 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "program design notes",
            "content": "Essential Knowledge . A development process can be ordered and intentional or exploratory in nature . There are multiple development processed like investigation, designing, prototyping, and testing. . A development process that is iterative requires refinement and revision based on feedback, testing, or reflection. . A development process that is incremental is one that breaks the problem into smaller pieces and makes sure each piece works. . Investigation in a development process is useful for understanding and identifying the program constraints. . How is a program developed . Programs start with an idea. . Developer follow steps and stick with plan. . Development is exploratory. . Developers decide on the program requirements that . describe how a program should behave . include a list of user interactions . The program specifications outline all of the requirements . Developers create a prototype of the program. . an incremental process is frequently used so developers can refine small parts of the program . Testing . Developers test the program every step of the way. . Testing occurs at . -Micro level . -Macro level . Developers refine and revise through testing, feedback, and reflection . Essential Knowledge . It is important to acknowledge any code segments that were developed collaboratively or by another source. . Acknowledgement of a code segment written by someone else and used in a program can be in the program documentation. The acknowledgement should include the origin or original author’s name. . Program developments are rarely a solo endeavor . People usually developed by team . Quiz Result . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/10/07/Program-Design-and-Development.html",
            "relUrl": "/markdown/2022/10/07/Program-Design-and-Development.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Error Correcting",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 0 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 0 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? order = [] while True: #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item ==&quot;&quot;: break else: order.append(item) print(order) for v in order: total = total + menu[v] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 [&#39;fries&#39;, &#39;burger&#39;] 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | syntax error, | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "design purpose notes",
            "content": "This is about the design purpose. . Computing Innovation . 1.The purpose of computing innovations is to solve problems or to pursue interests through creative expression. . 2.An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovations. . Categories of Innovations . -Games -Social Media -Business -Productivity . -Computers -Smart phones -Wearable . -Ecommerce -Cloud services -Email . Social medias and applications allow users to connect from distance and achieve activity. E-commerce allow users to shop at home. Digital assistance device allow user to control device hand-free. . The purpose of computing innovations is to solve problems or pursue interest through creative expression. . Computer Programs accept input in a variety of different forms: . tactile (touch), audio, visual, text. . Most programs are written in an event driven environment. . Events are triggered by some action, which usually send user input to the program. . Input usually affects the output. . How does a program know what to do upon and event? . Action may be initiated by the user or another program. . In event driven programming program statements are executed when triggered rather than through the sequential flow of control. . Input can come from a user or other programs . Program outputs are any data sent from a program to a device. . Program output is usually based on a program’s input or prior state. . What is a program . A program is a collection of statements. . A statement is a single command. . A group of statement is called a code segment. . Code segment are executed according to the rules of the programming language. . A program is often referred. . Code segment are texts and blocks. . A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software. . A code segment is a collection of program statements that is part of a program. . A program needs to work for a variety of input and situations. . The behavior of a program is how a program functions during execution and is often described by how a user interacts with it. . A program can be described broadly by what is does, or in more detail by both what the program does and how the program statements accomplish this function. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/27/design-purpose.html",
            "relUrl": "/markdown/2022/09/27/design-purpose.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "group collaboration",
            "content": "this is our group collaboration document for our one minute video about the progress of week 4. . link to the document: https://docs.google.com/document/d/1avkIHNbIw9B5v5CJorXVSfoNCwZ0t2p_Jd1e0XT_pVc/edit?usp=sharing .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/20/group-collaboration.html",
            "relUrl": "/markdown/2022/09/20/group-collaboration.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Binary | . . JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "quiz plan",
            "content": "I’ll be planning my quiz questions here . 1.Find the missing length using pythagroean theorem . 2.Find the limit of f(x) . 3.Find the maximum value of the graph . 4.Find the limit of f(x) . College Board Create Performance Task . Step 1: program purpose and function . The purpose of the quiz is to improve a student’s math skill. . Step 2: data abstraction . The code.org does not involve data abstraction because the codes are already covert to blocks. . Step 3: managing complexity . Data abstraction make coding easier for coders. In code.org, user simply drag and drop, list will be not necessary. . Step 4: procedural abstraction . Procedural abstraction allows coder to type less code. For example, you are typing a repeating code for many times, it can be replace with less codes. . Step 5: algorithm implementation . In my code.org quiz, I use sequencing because all the events go in order. . Step 6: testing . I test my quiz by running the program. On each page, I check all the buttons to ensure they lead to the correct page. Last, I check the console log to see if they display the correct thing. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/11/quiz-plan.html",
            "relUrl": "/markdown/2022/09/11/quiz-plan.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "My Change In Theme",
            "content": "su— toc: false layout: post description: Summary of change in theme on my fastpage categories: markdown title: my change in theme comments: true — . This is my attempt to change the theme of my fastpage . I choose a theme called midnight and change the remote theme on my fastpage. It works great. Except I can’t reach my posts in the changed theme. . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/09/06/my-change-in-theme.html",
            "relUrl": "/2022/09/06/my-change-in-theme.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Antony Yu&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Antony Yu &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 16 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Antony Yu&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0} &lt;class &#39;dict&#39;&gt; length 3 - person[&#34;name&#34;] Antony Yu &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . mylist = {1, 2, 3, 4} print(&quot;mylist&quot;, mylist, type(mylist), &quot;length&quot;, len(mylist)) print(&quot;- mylist[0]&quot;, mylist[2], type(mylist[2])) . mylist {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; length 4 . TypeError Traceback (most recent call last) /tmp/ipykernel_569/1539318579.py in &lt;module&gt; 1 mylist = {1, 2, 3, 4} 2 print(&#34;mylist&#34;, mylist, type(mylist), &#34;length&#34;, len(mylist)) -&gt; 3 print(&#34;- mylist[0]&#34;, mylist[2], type(mylist[2])) TypeError: &#39;set&#39; object is not subscriptable . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}, {&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobby:&quot;, d_rec[&quot;Hobby&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Antony Yu&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Antony Yu &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 16 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Antony Yu&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0} &lt;class &#39;dict&#39;&gt; length 3 - person[&#34;name&#34;] Antony Yu &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . mylist = {1, 2, 3, 4} print(&quot;mylist&quot;, mylist, type(mylist), &quot;length&quot;, len(mylist)) print(&quot;- mylist[0]&quot;, mylist[2], type(mylist[2])) . mylist {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; length 4 . TypeError Traceback (most recent call last) /tmp/ipykernel_569/1539318579.py in &lt;module&gt; 1 mylist = {1, 2, 3, 4} 2 print(&#34;mylist&#34;, mylist, type(mylist), &#34;length&#34;, len(mylist)) -&gt; 3 print(&#34;- mylist[0]&#34;, mylist[2], type(mylist[2])) TypeError: &#39;set&#39; object is not subscriptable . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}, {&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobby:&quot;, d_rec[&quot;Hobby&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "My page",
            "content": "My Page . This is my personal page. . ### . I like play with keyboards and music software during free time. . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/28/Mypage.html",
            "relUrl": "/markdown/2022/08/28/Mypage.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "My tool check",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /home/anton/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/anton/.local/share/jupyter/kernels/bash javascript /home/anton/.local/share/jupyter/kernels/javascript python3 /home/anton/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/anton/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/26/mytoolcheck.html",
            "relUrl": "/markdown/2022/08/26/mytoolcheck.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Math",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is the answer for x? 2x+5=7&quot;) if rsp == &quot;1&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the shape of function, 6x² + 11x - 35?&quot;) if rsp == &quot;quadratic&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the y-intercept of this function? y=2x+3&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the root of this function? y=2(x+3)&quot;) if rsp == &quot;-3&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, anton running c: Users anton AppData Local Programs Python Python310 python.exe You will be asked 4 questions. Question: Are you ready to take a test? Question: What is the answer for x? 2x+5=7 1 Your answer is correct Question: What is the shape of function, 6x² + 11x - 35? 3 Your answer is incorrect Question: What is the y-intercept of this function? y=2x+3 -3 Your answer is incorrect Question: What is the root of this function? y=2(x+3) 3 Your answer is incorrect anton you scored 1/4 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdowns/2022/08/24/quiz.html",
            "relUrl": "/markdowns/2022/08/24/quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "test markdown",
            "content": "This is the first markdown of this fastpage . this is the first blog. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/23/test-markdown.html",
            "relUrl": "/markdown/2022/08/23/test-markdown.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Title",
            "content": "print(&quot;hi, this is my first fastpage&quot;) . hi, this is my first fastpage .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/08/23/myjupyternotebook.html",
            "relUrl": "/2022/08/23/myjupyternotebook.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "docker server",
            "content": "",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/06/16/docker-server.html",
            "relUrl": "/markdown/2022/06/16/docker-server.html",
            "date": " • Jun 16, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Antony Y. I’m a 9th grader at Del Norte High School. . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "Error Correcting | RapidAPI Testing | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Class",
          "content": "this page is for recording assignments. . week notes . week 0 | Creating the fastpage | . week 1 | Use python to create a quiz | . week 2 | List and dictionary, theme, darkmode | . week 3 | Creating a quiz in code.org | . week 4 | Running fast page locally | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/class/",
          "relUrl": "/class/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Frontend&key",
          "content": "| Overview | Binary | . AWS private key . —–BEGIN RSA PRIVATE KEY—– MIIEowIBAAKCAQEAhGEt3gND/6Nsx5wHVQoiGOh5E1J02uVNQHsoxKTSxbNKfxlk ehARRnlppqzEO+1ej8djJusg0AOXDevpwyl3ZcyW+r7Pm1bp2xwNaO/uUltXD7pU TAnRkhBfAZPkLdwLpTLCUWQhFHtjypPBKFsOAp3QuqO2qpsR7qWRT6QP6H9zdQpk oUOA9na9bIvZ0tH3ucW9DTXbH8A4vOzFfW+uqGEsxYsDBhwFF0Le9ed8IkAY6S9I l9Mo1G/f3fuOERXiX2XZZ90tj/XQvxGzKBkaMge3pK3KGoG6zlYYOgLrWWBfDQVM /TNfglWIym2Ppfnv810fkPYO/2mlN+bozlocmQIDAQABAoIBADWjls09r4DW/E3J SCNKDtTe5ahRoe3MOcgl3zgGvSzEYCwt4sue1REkQw35NS4/GTDTDrcHUO1Ydw16 COc+VxXVl1uUk1STHADfVgOuLHgMcLN7wYpp9BPmNEjUXwHCBqnyblBCbTD6ak38 Hqk2c+/VeG0Xxv1MBjEXv1Bw3s1KuhJ5bfB0dK/QEC+9wfyDWHtMB3Cwc/fduyt3 UIS6l9g90WQRra2ud7YVVGhh+fLAupZjiojOzekG86ddoDcJmsdJix01Fl3t/ix6 soSyq2xxRwyUFTqqaBlKGVbHUshyv3rLVKHiZEO7Rml0E5k7mPmkgHBSK/1bRwJE lr/JnbECgYEAuTg6R98iG1KNgZmomSZqLaoSlW/5SnZH0wXMBMbnLx/cKgdxc2O7 Ls11sz7p1P8dd8Jn2QW+9bj3nKHHfRbnO9STPhD4yggGRTD5izztg4nnCp78dNqA Ml42IfjF7+dm9aDDW47cmx8f7ScNEV43jpBeAQ+6k8OhC8hQJvn8tOUCgYEAtvev yMDVuAFHy8uA89FdB9wKs5NniRdaqAx/ldKV6XuHEVHlSx3hL2YHLohWXriuBqTn GuzAwVy6DTUdccUTPqigqnLCsK7F9xk0xMEFUKgtwMvIH+wDUZZT5e9TxrlnfvHR LPLV/9G4rVI9JrRHb04Z7aE9/CE7P63F7WQIIaUCgYBtj1L6HITiQIyvsqLGJLD9 3fIsLxX488o8ittJoBY0C9aBjfGP3dhlMOeEZZyPf3CA3J/tAbcZRpZBMnj8B0Y0 X+PQ/N0NNH3xA604rYuZGUNvRufyfyUBpjTDF5KN/AUtGjE0wWbA40JRV54lPeQD EmZonlMxALEMdSrkQ081+QKBgE4pn6m2X1adDWvNQwhlr0V1RgkS9o8FMBBMTpDV hn9Y6wmGH9soJ5PVFUpWqfcLFCT4e1XwQCQalcygnTSGCUOiTAikv/E0qJN37CgF gVzEi88p/xNMAtruymaXCAYEHGeJrF90WeFQWYGJeWA4ca/mAIOYd19nXuVEOiLA sgyVAoGBAIJwiUoH0WJyQC9lR0OPtealRxQ01MqMI4P1icyTOBSnpmiREFs9UGWi ppVjuWiaF74ECkVnlhTMwKnTH0Q6nyZ78SVilBPdO7/HNO/OqFz46FRaCzhcpBxT SNQv5f2emuhnpIa4Bq8hw6Z8NPzPP1RRDMlAaMBzEChEBKr4YY27 —–END RSA PRIVATE KEY—– .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}