{
  
    
        "post0": {
            "title": "Internet Note",
            "content": "",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/10/13/Internet-Note.html",
            "relUrl": "/2022/10/13/Internet-Note.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Identifying and correct error",
            "content": "Essential Knowledge . A logic error is a mistake in the algorithm or program that causes it to behave incorrectly or unexpectedly. . A syntax error is a mistake in the program where the rules of the programming language are not followed. . A run-time error is a mistake in the program that occurs during the execution of a program. . An overflow error is an error that occurs when a computer attempts to handle a number that is outside of the defined range of values. . Errors and programming go hand in hand . Programmers are constantly running into errors when they program . In fact, it is an expectation that errors are a part of the programming process. . Proficient programmers can identify errors as one of the following types: . logic error, syntax error, runtime error, overflow error. . Logic Error . Logic error is caused by the programmer making a mistake in the algorithm which causes by program to behave unexpectedly . . . Syntax Error . This is a mistake when a programmer makes a typo or writes some code that doesn’t follow the rule of the language. . Syntax errors cause the program to fail to run. . Examples of forgetting to include . colon/semicolon, parenthesis, surly braces, indentation, quotes, variable definition. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/10/10/Identify-and-correct-error.html",
            "relUrl": "/markdown/2022/10/10/Identify-and-correct-error.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "API",
            "content": "import requests url = &quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly&quot; querystring = {&quot;lat&quot;:&quot;35.5&quot;,&quot;lon&quot;:&quot;-78.5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;abbfe3759emsh2b005c6f0664e48p143368jsna2d7e6d7bfa7&quot;, &quot;X-RapidAPI-Host&quot;: &quot;weatherbit-v1-mashape.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;lat&#34;:35.5,&#34;timezone&#34;:&#34;America /New_York&#34;,&#34;data&#34;:[{&#34;timestamp_utc&#34;:&#34;2022-10-17T18:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:297,&#34;datetime&#34;:&#34;2022-10-17:18&#34;,&#34;ts&#34;:1666029600,&#34;clouds_low&#34;:6,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:13.4,&#34;uv&#34;:4.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:13.15,&#34;solar_rad&#34;:667.4472,&#34;wind_dir&#34;:216,&#34;ghi&#34;:692.61,&#34;dhi&#34;:109.62,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:25.5,&#34;app_temp&#34;:25.4,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:47,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:998,&#34;snow_depth&#34;:0,&#34;slp&#34;:1005.5,&#34;dni&#34;:871.52,&#34;clouds&#34;:6,&#34;vis&#34;:40.672,&#34;timestamp_local&#34;:&#34;2022-10-17T14:00:00&#34;,&#34;wind_spd&#34;:6.58},{&#34;timestamp_utc&#34;:&#34;2022-10-17T21:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:297.3,&#34;datetime&#34;:&#34;2022-10-17:21&#34;,&#34;ts&#34;:1666040400,&#34;clouds_low&#34;:66,&#34;clouds_mid&#34;:5,&#34;dewpt&#34;:12.7,&#34;uv&#34;:1,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:10.38,&#34;solar_rad&#34;:191.87717,&#34;wind_dir&#34;:210,&#34;ghi&#34;:257.09,&#34;dhi&#34;:72.58,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:803,&#34;icon&#34;:&#34;c03d&#34;,&#34;description&#34;:&#34;Broken clouds&#34;},&#34;temp&#34;:25.1,&#34;app_temp&#34;:24.9,&#34;wind_cdir_full&#34;:&#34;south-southwest&#34;,&#34;wind_cdir&#34;:&#34;SSW&#34;,&#34;rh&#34;:46,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:996,&#34;snow_depth&#34;:0,&#34;slp&#34;:1003,&#34;dni&#34;:639.38,&#34;clouds&#34;:66,&#34;vis&#34;:42.592,&#34;timestamp_local&#34;:&#34;2022-10-17T17:00:00&#34;,&#34;wind_spd&#34;:5.75},{&#34;timestamp_utc&#34;:&#34;2022-10-18T00:00:00&#34;,&#34;pop&#34;:20,&#34;ozone&#34;:294.8,&#34;datetime&#34;:&#34;2022-10-18:00&#34;,&#34;ts&#34;:1666051200,&#34;clouds_low&#34;:57,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:10.9,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:10.73,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:210,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0.005996704,&#34;weather&#34;:{&#34;code&#34;:803,&#34;icon&#34;:&#34;c03n&#34;,&#34;description&#34;:&#34;Broken clouds&#34;},&#34;temp&#34;:21.8,&#34;app_temp&#34;:21.4,&#34;wind_cdir_full&#34;:&#34;south-southwest&#34;,&#34;wind_cdir&#34;:&#34;SSW&#34;,&#34;rh&#34;:50,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:996.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1004.5,&#34;dni&#34;:0,&#34;clouds&#34;:57,&#34;vis&#34;:37.984,&#34;timestamp_local&#34;:&#34;2022-10-17T20:00:00&#34;,&#34;wind_spd&#34;:6.44},{&#34;timestamp_utc&#34;:&#34;2022-10-18T03:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:294.5,&#34;datetime&#34;:&#34;2022-10-18:03&#34;,&#34;ts&#34;:1666062000,&#34;clouds_low&#34;:7,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:9.3,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:11.52,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:306,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:16.4,&#34;app_temp&#34;:16.4,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:63,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:3,&#34;pres&#34;:998,&#34;snow_depth&#34;:0,&#34;slp&#34;:1005.5,&#34;dni&#34;:0,&#34;clouds&#34;:7,&#34;vis&#34;:28.688,&#34;timestamp_local&#34;:&#34;2022-10-17T23:00:00&#34;,&#34;wind_spd&#34;:4.22},{&#34;timestamp_utc&#34;:&#34;2022-10-18T06:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:294,&#34;datetime&#34;:&#34;2022-10-18:06&#34;,&#34;ts&#34;:1666072800,&#34;clouds_low&#34;:80,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:4.4,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:10.23,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:336,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:804,&#34;icon&#34;:&#34;c04n&#34;,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;temp&#34;:12.7,&#34;app_temp&#34;:12.7,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;wind_cdir&#34;:&#34;NNW&#34;,&#34;rh&#34;:57,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:999,&#34;snow_depth&#34;:0,&#34;slp&#34;:1006.5,&#34;dni&#34;:0,&#34;clouds&#34;:80,&#34;vis&#34;:33.184,&#34;timestamp_local&#34;:&#34;2022-10-18T02:00:00&#34;,&#34;wind_spd&#34;:5.12},{&#34;timestamp_utc&#34;:&#34;2022-10-18T09:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:299.3,&#34;datetime&#34;:&#34;2022-10-18:09&#34;,&#34;ts&#34;:1666083600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-1,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:11.84,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:330,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:8.3,&#34;app_temp&#34;:8.3,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;wind_cdir&#34;:&#34;NNW&#34;,&#34;rh&#34;:52,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1000,&#34;snow_depth&#34;:0,&#34;slp&#34;:1007,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:36.8,&#34;timestamp_local&#34;:&#34;2022-10-18T05:00:00&#34;,&#34;wind_spd&#34;:4.49},{&#34;timestamp_utc&#34;:&#34;2022-10-18T12:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:301.3,&#34;datetime&#34;:&#34;2022-10-18:12&#34;,&#34;ts&#34;:1666094400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-5.3,&#34;uv&#34;:1.5,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:12.09,&#34;solar_rad&#34;:72.29,&#34;wind_dir&#34;:326,&#34;ghi&#34;:72.29,&#34;dhi&#34;:40.99,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:7.8,&#34;app_temp&#34;:7.8,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:39,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1001.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1009.5,&#34;dni&#34;:360.32,&#34;clouds&#34;:0,&#34;vis&#34;:0.499,&#34;timestamp_local&#34;:&#34;2022-10-18T08:00:00&#34;,&#34;wind_spd&#34;:5.24},{&#34;timestamp_utc&#34;:&#34;2022-10-18T15:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:301.8,&#34;datetime&#34;:&#34;2022-10-18:15&#34;,&#34;ts&#34;:1666105200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-4.6,&#34;uv&#34;:4,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:7.04,&#34;solar_rad&#34;:596.21,&#34;wind_dir&#34;:314,&#34;ghi&#34;:596.21,&#34;dhi&#34;:103.26,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:11,&#34;app_temp&#34;:11,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:33,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1002,&#34;snow_depth&#34;:0,&#34;slp&#34;:1010,&#34;dni&#34;:837.54,&#34;clouds&#34;:0,&#34;vis&#34;:0.575,&#34;timestamp_local&#34;:&#34;2022-10-18T11:00:00&#34;,&#34;wind_spd&#34;:5.32},{&#34;timestamp_utc&#34;:&#34;2022-10-18T18:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:302.5,&#34;datetime&#34;:&#34;2022-10-18:18&#34;,&#34;ts&#34;:1666116000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-5.6,&#34;uv&#34;:4.9,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:7.65,&#34;solar_rad&#34;:687.38,&#34;wind_dir&#34;:281,&#34;ghi&#34;:687.38,&#34;dhi&#34;:109.32,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:13,&#34;app_temp&#34;:13,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:27,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1001,&#34;snow_depth&#34;:0,&#34;slp&#34;:1009.5,&#34;dni&#34;:870.16,&#34;clouds&#34;:0,&#34;vis&#34;:0.668,&#34;timestamp_local&#34;:&#34;2022-10-18T14:00:00&#34;,&#34;wind_spd&#34;:5.71},{&#34;timestamp_utc&#34;:&#34;2022-10-18T21:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:300.8,&#34;datetime&#34;:&#34;2022-10-18:21&#34;,&#34;ts&#34;:1666126800,&#34;clouds_low&#34;:3,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.9,&#34;uv&#34;:1.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:7.7,&#34;solar_rad&#34;:252.2685,&#34;wind_dir&#34;:293,&#34;ghi&#34;:252.27,&#34;dhi&#34;:72.02,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:12.3,&#34;app_temp&#34;:12.3,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:32,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1002,&#34;snow_depth&#34;:0,&#34;slp&#34;:1009,&#34;dni&#34;:635.16,&#34;clouds&#34;:3,&#34;vis&#34;:0.594,&#34;timestamp_local&#34;:&#34;2022-10-18T17:00:00&#34;,&#34;wind_spd&#34;:5.59},{&#34;timestamp_utc&#34;:&#34;2022-10-19T00:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:302.3,&#34;datetime&#34;:&#34;2022-10-19:00&#34;,&#34;ts&#34;:1666137600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.1,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.68,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:294,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:9.1,&#34;app_temp&#34;:9.1,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:42,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1004.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1011,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:0.463,&#34;timestamp_local&#34;:&#34;2022-10-18T20:00:00&#34;,&#34;wind_spd&#34;:2.8},{&#34;timestamp_utc&#34;:&#34;2022-10-19T03:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:302,&#34;datetime&#34;:&#34;2022-10-19:03&#34;,&#34;ts&#34;:1666148400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.7,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.75,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:298,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:7.1,&#34;app_temp&#34;:4.5,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:46,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1006.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1013,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:41.888,&#34;timestamp_local&#34;:&#34;2022-10-18T23:00:00&#34;,&#34;wind_spd&#34;:3.75},{&#34;timestamp_utc&#34;:&#34;2022-10-19T06:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:300.8,&#34;datetime&#34;:&#34;2022-10-19:06&#34;,&#34;ts&#34;:1666159200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.6,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.75,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:276,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:5.2,&#34;app_temp&#34;:3,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:53,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1007,&#34;snow_depth&#34;:0,&#34;slp&#34;:1013.5,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:34.592,&#34;timestamp_local&#34;:&#34;2022-10-19T02:00:00&#34;,&#34;wind_spd&#34;:2.61},{&#34;timestamp_utc&#34;:&#34;2022-10-19T09:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304.8,&#34;datetime&#34;:&#34;2022-10-19:09&#34;,&#34;ts&#34;:1666170000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.42,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:251,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:3.6,&#34;app_temp&#34;:0.9,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:62,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1007.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1014.5,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:28.096,&#34;timestamp_local&#34;:&#34;2022-10-19T05:00:00&#34;,&#34;wind_spd&#34;:2.98},{&#34;timestamp_utc&#34;:&#34;2022-10-19T12:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:308.8,&#34;datetime&#34;:&#34;2022-10-19:12&#34;,&#34;ts&#34;:1666180800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.9,&#34;uv&#34;:1.5,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.68,&#34;solar_rad&#34;:69.58,&#34;wind_dir&#34;:262,&#34;ghi&#34;:69.58,&#34;dhi&#34;:40.28,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:3.1,&#34;app_temp&#34;:0.3,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:60,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1010,&#34;snow_depth&#34;:0,&#34;slp&#34;:1016,&#34;dni&#34;:352.99,&#34;clouds&#34;:0,&#34;vis&#34;:29.296,&#34;timestamp_local&#34;:&#34;2022-10-19T08:00:00&#34;,&#34;wind_spd&#34;:2.88},{&#34;timestamp_utc&#34;:&#34;2022-10-19T15:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:305.8,&#34;datetime&#34;:&#34;2022-10-19:15&#34;,&#34;ts&#34;:1666191600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:0.1,&#34;uv&#34;:3.9,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:8.4,&#34;solar_rad&#34;:591.7,&#34;wind_dir&#34;:256,&#34;ghi&#34;:591.7,&#34;dhi&#34;:102.98,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:10,&#34;app_temp&#34;:10,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:50,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1009.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1017,&#34;dni&#34;:836.13,&#34;clouds&#34;:0,&#34;vis&#34;:24.096,&#34;timestamp_local&#34;:&#34;2022-10-19T11:00:00&#34;,&#34;wind_spd&#34;:5.31},{&#34;timestamp_utc&#34;:&#34;2022-10-19T18:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304.3,&#34;datetime&#34;:&#34;2022-10-19:18&#34;,&#34;ts&#34;:1666202400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:1.3,&#34;uv&#34;:4.9,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.9,&#34;solar_rad&#34;:682.16,&#34;wind_dir&#34;:253,&#34;ghi&#34;:682.16,&#34;dhi&#34;:109.03,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:13,&#34;app_temp&#34;:13,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:45,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1008,&#34;snow_depth&#34;:0,&#34;slp&#34;:1015.5,&#34;dni&#34;:868.8,&#34;clouds&#34;:0,&#34;vis&#34;:24.096,&#34;timestamp_local&#34;:&#34;2022-10-19T14:00:00&#34;,&#34;wind_spd&#34;:5.01},{&#34;timestamp_utc&#34;:&#34;2022-10-19T21:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304,&#34;datetime&#34;:&#34;2022-10-19:21&#34;,&#34;ts&#34;:1666213200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:1.6,&#34;uv&#34;:1.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.6,&#34;solar_rad&#34;:247.52,&#34;wind_dir&#34;:260,&#34;ghi&#34;:247.52,&#34;dhi&#34;:71.45,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:13.3,&#34;app_temp&#34;:13.3,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:45,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1007.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1015.5,&#34;dni&#34;:630.91,&#34;clouds&#34;:0,&#34;vis&#34;:24.096,&#34;timestamp_local&#34;:&#34;2022-10-19T17:00:00&#34;,&#34;wind_spd&#34;:4.43},{&#34;timestamp_utc&#34;:&#34;2022-10-20T00:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:305.5,&#34;datetime&#34;:&#34;2022-10-20:00&#34;,&#34;ts&#34;:1666224000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:1.6,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.2,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:271,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:10.2,&#34;app_temp&#34;:10.2,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:55,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1009.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1017,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:24.096,&#34;timestamp_local&#34;:&#34;2022-10-19T20:00:00&#34;,&#34;wind_spd&#34;:1.87},{&#34;timestamp_utc&#34;:&#34;2022-10-20T03:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:307.8,&#34;datetime&#34;:&#34;2022-10-20:03&#34;,&#34;ts&#34;:1666234800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.6,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.21,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:266,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:8.2,&#34;app_temp&#34;:8.2,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:43,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-19T23:00:00&#34;,&#34;wind_spd&#34;:2.81},{&#34;timestamp_utc&#34;:&#34;2022-10-20T06:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:305,&#34;datetime&#34;:&#34;2022-10-20:06&#34;,&#34;ts&#34;:1666245600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.8,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.94,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:303,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:6.1,&#34;app_temp&#34;:4.2,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:49,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019.5,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T02:00:00&#34;,&#34;wind_spd&#34;:2.57},{&#34;timestamp_utc&#34;:&#34;2022-10-20T09:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304.8,&#34;datetime&#34;:&#34;2022-10-20:09&#34;,&#34;ts&#34;:1666256400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-4.4,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.9,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:301,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:4.9,&#34;app_temp&#34;:3.3,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:51,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019,&#34;dni&#34;:0,&#34;clouds&#34;:1,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T05:00:00&#34;,&#34;wind_spd&#34;:1.92},{&#34;timestamp_utc&#34;:&#34;2022-10-20T12:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304,&#34;datetime&#34;:&#34;2022-10-20:12&#34;,&#34;ts&#34;:1666267200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:24,&#34;dewpt&#34;:-3.6,&#34;uv&#34;:1.3,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:0.21,&#34;solar_rad&#34;:66.41707,&#34;wind_dir&#34;:66,&#34;ghi&#34;:66.88,&#34;dhi&#34;:39.55,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:802,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;temp&#34;:5.2,&#34;app_temp&#34;:7.4,&#34;wind_cdir_full&#34;:&#34;east-northeast&#34;,&#34;wind_cdir&#34;:&#34;ENE&#34;,&#34;rh&#34;:53,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:81,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019,&#34;dni&#34;:345.45,&#34;clouds&#34;:24,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T08:00:00&#34;,&#34;wind_spd&#34;:0.21},{&#34;timestamp_utc&#34;:&#34;2022-10-20T15:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304,&#34;datetime&#34;:&#34;2022-10-20:15&#34;,&#34;ts&#34;:1666278000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:5,&#34;dewpt&#34;:-3.1,&#34;uv&#34;:3.7,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.33,&#34;solar_rad&#34;:587.155,&#34;wind_dir&#34;:182,&#34;ghi&#34;:587.17,&#34;dhi&#34;:102.69,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:13.2,&#34;app_temp&#34;:13.2,&#34;wind_cdir_full&#34;:&#34;south&#34;,&#34;wind_cdir&#34;:&#34;S&#34;,&#34;rh&#34;:32,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019.5,&#34;dni&#34;:834.71,&#34;clouds&#34;:5,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T11:00:00&#34;,&#34;wind_spd&#34;:2.37},{&#34;timestamp_utc&#34;:&#34;2022-10-20T18:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304.8,&#34;datetime&#34;:&#34;2022-10-20:18&#34;,&#34;ts&#34;:1666288800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:2,&#34;dewpt&#34;:-2.1,&#34;uv&#34;:4.7,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.52,&#34;solar_rad&#34;:676.9578,&#34;wind_dir&#34;:215,&#34;ghi&#34;:676.96,&#34;dhi&#34;:108.73,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:17.7,&#34;app_temp&#34;:17.7,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:26,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1008,&#34;snow_depth&#34;:0,&#34;slp&#34;:1016,&#34;dni&#34;:867.42,&#34;clouds&#34;:2,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T14:00:00&#34;,&#34;wind_spd&#34;:4.43},{&#34;timestamp_utc&#34;:&#34;2022-10-20T21:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:307.5,&#34;datetime&#34;:&#34;2022-10-20:21&#34;,&#34;ts&#34;:1666299600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-1.1,&#34;uv&#34;:1.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.71,&#34;solar_rad&#34;:242.81993,&#34;wind_dir&#34;:220,&#34;ghi&#34;:242.82,&#34;dhi&#34;:70.88,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:17.6,&#34;app_temp&#34;:17.6,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:28,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1006.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1014,&#34;dni&#34;:626.63,&#34;clouds&#34;:1,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T17:00:00&#34;,&#34;wind_spd&#34;:4.52},{&#34;timestamp_utc&#34;:&#34;2022-10-21T00:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:311.8,&#34;datetime&#34;:&#34;2022-10-21:00&#34;,&#34;ts&#34;:1666310400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:89,&#34;dewpt&#34;:-2.8,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:4.4,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:228,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:804,&#34;icon&#34;:&#34;c04n&#34;,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;temp&#34;:11,&#34;app_temp&#34;:11,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:38,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1007.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1015.5,&#34;dni&#34;:0,&#34;clouds&#34;:89,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T20:00:00&#34;,&#34;wind_spd&#34;:3.01},{&#34;timestamp_utc&#34;:&#34;2022-10-21T03:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:307,&#34;datetime&#34;:&#34;2022-10-21:03&#34;,&#34;ts&#34;:1666321200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:5,&#34;dewpt&#34;:-3.6,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.71,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:218,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:8.9,&#34;app_temp&#34;:8.9,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:41,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1008.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1016.5,&#34;dni&#34;:0,&#34;clouds&#34;:5,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-20T23:00:00&#34;,&#34;wind_spd&#34;:2.81},{&#34;timestamp_utc&#34;:&#34;2022-10-21T06:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:303.8,&#34;datetime&#34;:&#34;2022-10-21:06&#34;,&#34;ts&#34;:1666332000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3.2,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.31,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:233,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:7.3,&#34;app_temp&#34;:7.3,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:47,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1008.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1016.5,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T02:00:00&#34;,&#34;wind_spd&#34;:2.29},{&#34;timestamp_utc&#34;:&#34;2022-10-21T09:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:305.3,&#34;datetime&#34;:&#34;2022-10-21:09&#34;,&#34;ts&#34;:1666342800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-4.1,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.11,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:279,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01n&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:6.4,&#34;app_temp&#34;:4.9,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:47,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1008,&#34;snow_depth&#34;:0,&#34;slp&#34;:1016.5,&#34;dni&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T05:00:00&#34;,&#34;wind_spd&#34;:2.05},{&#34;timestamp_utc&#34;:&#34;2022-10-21T12:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:308.5,&#34;datetime&#34;:&#34;2022-10-21:12&#34;,&#34;ts&#34;:1666353600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-4.8,&#34;uv&#34;:1.5,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.7,&#34;solar_rad&#34;:64.19,&#34;wind_dir&#34;:314,&#34;ghi&#34;:64.19,&#34;dhi&#34;:38.81,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:6.6,&#34;app_temp&#34;:5.5,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:44,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1009.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1017.5,&#34;dni&#34;:337.71,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T08:00:00&#34;,&#34;wind_spd&#34;:1.74},{&#34;timestamp_utc&#34;:&#34;2022-10-21T15:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:304.5,&#34;datetime&#34;:&#34;2022-10-21:15&#34;,&#34;ts&#34;:1666364400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-2.9,&#34;uv&#34;:3.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:0.71,&#34;solar_rad&#34;:582.63,&#34;wind_dir&#34;:283,&#34;ghi&#34;:582.63,&#34;dhi&#34;:102.4,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:15.5,&#34;app_temp&#34;:15.5,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:28,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1011,&#34;snow_depth&#34;:0,&#34;slp&#34;:1019,&#34;dni&#34;:833.25,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T11:00:00&#34;,&#34;wind_spd&#34;:0.65},{&#34;timestamp_utc&#34;:&#34;2022-10-21T18:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:301.5,&#34;datetime&#34;:&#34;2022-10-21:18&#34;,&#34;ts&#34;:1666375200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-2.9,&#34;uv&#34;:4.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.71,&#34;solar_rad&#34;:671.78,&#34;wind_dir&#34;:218,&#34;ghi&#34;:671.78,&#34;dhi&#34;:108.44,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:800,&#34;icon&#34;:&#34;c01d&#34;,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;temp&#34;:19.4,&#34;app_temp&#34;:17.9,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:22,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:0,&#34;pres&#34;:1009.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1017.5,&#34;dni&#34;:866.03,&#34;clouds&#34;:0,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T14:00:00&#34;,&#34;wind_spd&#34;:1.7},{&#34;timestamp_utc&#34;:&#34;2022-10-21T21:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:299.5,&#34;datetime&#34;:&#34;2022-10-21:21&#34;,&#34;ts&#34;:1666386000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-1.9,&#34;uv&#34;:1.5,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.13,&#34;solar_rad&#34;:236.27611,&#34;wind_dir&#34;:227,&#34;ghi&#34;:238.2,&#34;dhi&#34;:70.31,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:802,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;temp&#34;:19.1,&#34;app_temp&#34;:17.6,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:24,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:100,&#34;pres&#34;:1009,&#34;snow_depth&#34;:0,&#34;slp&#34;:1017,&#34;dni&#34;:622.32,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T17:00:00&#34;,&#34;wind_spd&#34;:1.03},{&#34;timestamp_utc&#34;:&#34;2022-10-22T00:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:296.8,&#34;datetime&#34;:&#34;2022-10-22:00&#34;,&#34;ts&#34;:1666396800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-3,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.21,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:143,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:13.3,&#34;app_temp&#34;:13.3,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;wind_cdir&#34;:&#34;SE&#34;,&#34;rh&#34;:32,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:18,&#34;pres&#34;:1010.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1018.5,&#34;dni&#34;:0,&#34;clouds&#34;:4,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T20:00:00&#34;,&#34;wind_spd&#34;:1.15},{&#34;timestamp_utc&#34;:&#34;2022-10-22T03:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:294.5,&#34;datetime&#34;:&#34;2022-10-22:03&#34;,&#34;ts&#34;:1666407600,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-2.6,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.7,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:156,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:11.2,&#34;app_temp&#34;:11.2,&#34;wind_cdir_full&#34;:&#34;south-southeast&#34;,&#34;wind_cdir&#34;:&#34;SSE&#34;,&#34;rh&#34;:38,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:68,&#34;pres&#34;:1012,&#34;snow_depth&#34;:0,&#34;slp&#34;:1020,&#34;dni&#34;:0,&#34;clouds&#34;:17,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-21T23:00:00&#34;,&#34;wind_spd&#34;:1.75},{&#34;timestamp_utc&#34;:&#34;2022-10-22T06:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:291.5,&#34;datetime&#34;:&#34;2022-10-22:06&#34;,&#34;ts&#34;:1666418400,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-2.7,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:148,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:9.6,&#34;app_temp&#34;:9.6,&#34;wind_cdir_full&#34;:&#34;south-southeast&#34;,&#34;wind_cdir&#34;:&#34;SSE&#34;,&#34;rh&#34;:42,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:69,&#34;pres&#34;:1012.5,&#34;snow_depth&#34;:0,&#34;slp&#34;:1020.5,&#34;dni&#34;:0,&#34;clouds&#34;:17,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-22T02:00:00&#34;,&#34;wind_spd&#34;:1},{&#34;timestamp_utc&#34;:&#34;2022-10-22T09:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:287.8,&#34;datetime&#34;:&#34;2022-10-22:09&#34;,&#34;ts&#34;:1666429200,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:-2.7,&#34;uv&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.1,&#34;solar_rad&#34;:0,&#34;wind_dir&#34;:31,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02n&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:8.8,&#34;app_temp&#34;:8.8,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:44,&#34;pod&#34;:&#34;n&#34;,&#34;clouds_hi&#34;:6,&#34;pres&#34;:1013,&#34;snow_depth&#34;:0,&#34;slp&#34;:1021.5,&#34;dni&#34;:0,&#34;clouds&#34;:1,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-22T05:00:00&#34;,&#34;wind_spd&#34;:1.05},{&#34;timestamp_utc&#34;:&#34;2022-10-22T12:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:287.8,&#34;datetime&#34;:&#34;2022-10-22:12&#34;,&#34;ts&#34;:1666440000,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:4,&#34;dewpt&#34;:-1.9,&#34;uv&#34;:1.5,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.11,&#34;solar_rad&#34;:61.508648,&#34;wind_dir&#34;:22,&#34;ghi&#34;:61.51,&#34;dhi&#34;:38.05,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:8.8,&#34;app_temp&#34;:8.8,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:47,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1014,&#34;snow_depth&#34;:0,&#34;slp&#34;:1022.5,&#34;dni&#34;:329.76,&#34;clouds&#34;:4,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-22T08:00:00&#34;,&#34;wind_spd&#34;:2.16},{&#34;timestamp_utc&#34;:&#34;2022-10-22T15:00:00&#34;,&#34;pop&#34;:0,&#34;ozone&#34;:285,&#34;datetime&#34;:&#34;2022-10-22:15&#34;,&#34;ts&#34;:1666450800,&#34;clouds_low&#34;:0,&#34;clouds_mid&#34;:0,&#34;dewpt&#34;:0.9,&#34;uv&#34;:3.8,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.3,&#34;solar_rad&#34;:578.07983,&#34;wind_dir&#34;:58,&#34;ghi&#34;:578.08,&#34;dhi&#34;:102.11,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;code&#34;:801,&#34;icon&#34;:&#34;c02d&#34;,&#34;description&#34;:&#34;Few clouds&#34;},&#34;temp&#34;:17.8,&#34;app_temp&#34;:17.8,&#34;wind_cdir_full&#34;:&#34;east-northeast&#34;,&#34;wind_cdir&#34;:&#34;ENE&#34;,&#34;rh&#34;:32,&#34;pod&#34;:&#34;d&#34;,&#34;clouds_hi&#34;:5,&#34;pres&#34;:1015,&#34;snow_depth&#34;:0,&#34;slp&#34;:1023,&#34;dni&#34;:831.77,&#34;clouds&#34;:1,&#34;vis&#34;:24.128,&#34;timestamp_local&#34;:&#34;2022-10-22T11:00:00&#34;,&#34;wind_spd&#34;:2.76}],&#34;city_name&#34;:&#34;Four Oaks&#34;,&#34;state_code&#34;:&#34;NC&#34;,&#34;country_code&#34;:&#34;US&#34;,&#34;lon&#34;:-78.5} . from requests.api import head url = &#39;http://api.coincap.io/v2/assets&#39; headers = { &#39;Accept&#39;: &#39;applocation/json&#39;, &#39;Content-Type&#39;: &#39;application/json&#39; } response = requests.request(&quot;GET&quot;, url,headers=headers,data=[]) myjson = response.json() ourdata =[] csvheader = [&#39;SYMBOL&#39;,&#39;NAME&#39;,&#39;PRICE(USD)&#39;] for x in myjson[&#39;data&#39;]: listing = [x[&#39;symbol&#39;],x[&#39;name&#39;],x[&#39;priceUsd&#39;]] ourdata.append(listing) print(myjson) . {&#39;data&#39;: [{&#39;id&#39;: &#39;bitcoin&#39;, &#39;rank&#39;: &#39;1&#39;, &#39;symbol&#39;: &#39;BTC&#39;, &#39;name&#39;: &#39;Bitcoin&#39;, &#39;supply&#39;: &#39;19181912.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;374164738173.1223746779116024&#39;, &#39;volumeUsd24Hr&#39;: &#39;11026086326.9693732437993983&#39;, &#39;priceUsd&#39;: &#39;19506.1231733897212477&#39;, &#39;changePercent24Hr&#39;: &#39;1.9041498272881354&#39;, &#39;vwap24Hr&#39;: &#39;19388.8483671563357757&#39;, &#39;explorer&#39;: &#39;https://blockchain.info/&#39;}, {&#39;id&#39;: &#39;ethereum&#39;, &#39;rank&#39;: &#39;2&#39;, &#39;symbol&#39;: &#39;ETH&#39;, &#39;name&#39;: &#39;Ethereum&#39;, &#39;supply&#39;: &#39;122373863.4990000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;161583332083.0016373202011734&#39;, &#39;volumeUsd24Hr&#39;: &#39;4406243027.3949902837570421&#39;, &#39;priceUsd&#39;: &#39;1320.4072132961794128&#39;, &#39;changePercent24Hr&#39;: &#39;2.8400366605167010&#39;, &#39;vwap24Hr&#39;: &#39;1311.9952404261818045&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/&#39;}, {&#39;id&#39;: &#39;tether&#39;, &#39;rank&#39;: &#39;3&#39;, &#39;symbol&#39;: &#39;USDT&#39;, &#39;name&#39;: &#39;Tether&#39;, &#39;supply&#39;: &#39;68432559804.7884500000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;68463807959.7987956250623415&#39;, &#39;volumeUsd24Hr&#39;: &#39;235083929975.7473011877992284&#39;, &#39;priceUsd&#39;: &#39;1.0004566270076625&#39;, &#39;changePercent24Hr&#39;: &#39;0.0260133321153452&#39;, &#39;vwap24Hr&#39;: &#39;1.0002095320462247&#39;, &#39;explorer&#39;: &#39;https://www.omniexplorer.info/asset/31&#39;}, {&#39;id&#39;: &#39;binance-coin&#39;, &#39;rank&#39;: &#39;4&#39;, &#39;symbol&#39;: &#39;BNB&#39;, &#39;name&#39;: &#39;BNB&#39;, &#39;supply&#39;: &#39;166801148.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;166801148.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;45882728996.6190836735086768&#39;, &#39;volumeUsd24Hr&#39;: &#39;171549300.4463676588592388&#39;, &#39;priceUsd&#39;: &#39;275.0744197313263316&#39;, &#39;changePercent24Hr&#39;: &#39;1.6633473555714229&#39;, &#39;vwap24Hr&#39;: &#39;272.7418296895847296&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xB8c77482e45F1F44dE1745F52C74426C631bDD52&#39;}, {&#39;id&#39;: &#39;usd-coin&#39;, &#39;rank&#39;: &#39;5&#39;, &#39;symbol&#39;: &#39;USDC&#39;, &#39;name&#39;: &#39;USD Coin&#39;, &#39;supply&#39;: &#39;44967423126.0271700000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;44977862455.6361803095160601&#39;, &#39;volumeUsd24Hr&#39;: &#39;1115785927.5025759286760102&#39;, &#39;priceUsd&#39;: &#39;1.0002321531651870&#39;, &#39;changePercent24Hr&#39;: &#39;0.0145849450251150&#39;, &#39;vwap24Hr&#39;: &#39;0.9999332363402069&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;}, {&#39;id&#39;: &#39;binance-usd&#39;, &#39;rank&#39;: &#39;6&#39;, &#39;symbol&#39;: &#39;BUSD&#39;, &#39;name&#39;: &#39;Binance USD&#39;, &#39;supply&#39;: &#39;21628100610.9500000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;21639777483.4036673478321869&#39;, &#39;volumeUsd24Hr&#39;: &#39;1279660034.0946905371966768&#39;, &#39;priceUsd&#39;: &#39;1.0005398935701157&#39;, &#39;changePercent24Hr&#39;: &#39;0.0921479643962021&#39;, &#39;vwap24Hr&#39;: &#39;1.0001356116521770&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x4Fabb145d64652a948d72533023f6E7A623C7C53&#39;}, {&#39;id&#39;: &#39;xrp&#39;, &#39;rank&#39;: &#39;7&#39;, &#39;symbol&#39;: &#39;XRP&#39;, &#39;name&#39;: &#39;XRP&#39;, &#39;supply&#39;: &#39;45404028640.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;100000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;21441168146.5370833547231680&#39;, &#39;volumeUsd24Hr&#39;: &#39;677272738.2068516315473330&#39;, &#39;priceUsd&#39;: &#39;0.4722305220212962&#39;, &#39;changePercent24Hr&#39;: &#39;0.1103526870975859&#39;, &#39;vwap24Hr&#39;: &#39;0.4732963347721856&#39;, &#39;explorer&#39;: &#39;https://xrpcharts.ripple.com/#/graph/&#39;}, {&#39;id&#39;: &#39;cardano&#39;, &#39;rank&#39;: &#39;8&#39;, &#39;symbol&#39;: &#39;ADA&#39;, &#39;name&#39;: &#39;Cardano&#39;, &#39;supply&#39;: &#39;34292107635.9730000000000000&#39;, &#39;maxSupply&#39;: &#39;45000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;12732221128.5385595535900238&#39;, &#39;volumeUsd24Hr&#39;: &#39;112998956.6999677259774858&#39;, &#39;priceUsd&#39;: &#39;0.3712872146470882&#39;, &#39;changePercent24Hr&#39;: &#39;1.6115686584601759&#39;, &#39;vwap24Hr&#39;: &#39;0.3705661829757628&#39;, &#39;explorer&#39;: &#39;https://cardanoexplorer.com/&#39;}, {&#39;id&#39;: &#39;solana&#39;, &#39;rank&#39;: &#39;9&#39;, &#39;symbol&#39;: &#39;SOL&#39;, &#39;name&#39;: &#39;Solana&#39;, &#39;supply&#39;: &#39;357886494.8779862000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;10982084342.4639244542431586&#39;, &#39;volumeUsd24Hr&#39;: &#39;255824347.0850379439439749&#39;, &#39;priceUsd&#39;: &#39;30.6859423298664368&#39;, &#39;changePercent24Hr&#39;: &#39;2.6212593603140582&#39;, &#39;vwap24Hr&#39;: &#39;30.5203089151915185&#39;, &#39;explorer&#39;: &#39;https://explorer.solana.com/&#39;}, {&#39;id&#39;: &#39;terra-luna&#39;, &#39;rank&#39;: &#39;10&#39;, &#39;symbol&#39;: &#39;LUNA&#39;, &#39;name&#39;: &#39;Terra&#39;, &#39;supply&#39;: &#39;3453685944.3708580000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;9085109396.1948497888844025&#39;, &#39;volumeUsd24Hr&#39;: &#39;18716861.9719890257480560&#39;, &#39;priceUsd&#39;: &#39;2.6305545850231736&#39;, &#39;changePercent24Hr&#39;: &#39;1.5003732814262115&#39;, &#39;vwap24Hr&#39;: &#39;2.6204601374121715&#39;, &#39;explorer&#39;: &#39;https://finder.terra.money/&#39;}, {&#39;id&#39;: &#39;dogecoin&#39;, &#39;rank&#39;: &#39;11&#39;, &#39;symbol&#39;: &#39;DOGE&#39;, &#39;name&#39;: &#39;Dogecoin&#39;, &#39;supply&#39;: &#39;132670764299.8940900000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;7898297262.2870754058716297&#39;, &#39;volumeUsd24Hr&#39;: &#39;55975301.0637465584124819&#39;, &#39;priceUsd&#39;: &#39;0.0595330652081981&#39;, &#39;changePercent24Hr&#39;: &#39;1.4938081716524239&#39;, &#39;vwap24Hr&#39;: &#39;0.0592899485090817&#39;, &#39;explorer&#39;: &#39;http://dogechain.info/chain/Dogecoin&#39;}, {&#39;id&#39;: &#39;polygon&#39;, &#39;rank&#39;: &#39;12&#39;, &#39;symbol&#39;: &#39;MATIC&#39;, &#39;name&#39;: &#39;Polygon&#39;, &#39;supply&#39;: &#39;8734317475.2849300000000000&#39;, &#39;maxSupply&#39;: &#39;10000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;7294871857.9833706718100281&#39;, &#39;volumeUsd24Hr&#39;: &#39;135974603.3083026471181099&#39;, &#39;priceUsd&#39;: &#39;0.8351965541240414&#39;, &#39;changePercent24Hr&#39;: &#39;5.4195124823895326&#39;, &#39;vwap24Hr&#39;: &#39;0.8190790586872181&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0&#39;}, {&#39;id&#39;: &#39;polkadot&#39;, &#39;rank&#39;: &#39;13&#39;, &#39;symbol&#39;: &#39;DOT&#39;, &#39;name&#39;: &#39;Polkadot&#39;, &#39;supply&#39;: &#39;1161980981.1888100000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;7215129746.3173105956642117&#39;, &#39;volumeUsd24Hr&#39;: &#39;71794463.0147752638387513&#39;, &#39;priceUsd&#39;: &#39;6.2093354909609540&#39;, &#39;changePercent24Hr&#39;: &#39;1.0627425190100547&#39;, &#39;vwap24Hr&#39;: &#39;6.1979962588851376&#39;, &#39;explorer&#39;: &#39;https://polkascan.io/polkadot&#39;}, {&#39;id&#39;: &#39;multi-collateral-dai&#39;, &#39;rank&#39;: &#39;14&#39;, &#39;symbol&#39;: &#39;DAI&#39;, &#39;name&#39;: &#39;Multi Collateral DAI&#39;, &#39;supply&#39;: &#39;6458833750.1916030000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;6460646487.9357302081560290&#39;, &#39;volumeUsd24Hr&#39;: &#39;53139946.1349360729171401&#39;, &#39;priceUsd&#39;: &#39;1.0002806602266351&#39;, &#39;changePercent24Hr&#39;: &#39;0.0421977375957750&#39;, &#39;vwap24Hr&#39;: &#39;1.0003032075179186&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359&#39;}, {&#39;id&#39;: &#39;tron&#39;, &#39;rank&#39;: &#39;15&#39;, &#39;symbol&#39;: &#39;TRX&#39;, &#39;name&#39;: &#39;TRON&#39;, &#39;supply&#39;: &#39;92308428315.2145700000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;5788757615.0232684052896663&#39;, &#39;volumeUsd24Hr&#39;: &#39;89300976.6025528150443068&#39;, &#39;priceUsd&#39;: &#39;0.0627110408082763&#39;, &#39;changePercent24Hr&#39;: &#39;2.1615432038634297&#39;, &#39;vwap24Hr&#39;: &#39;0.0622935873746229&#39;, &#39;explorer&#39;: &#39;https://tronscan.org/#/&#39;}, {&#39;id&#39;: &#39;shiba-inu&#39;, &#39;rank&#39;: &#39;16&#39;, &#39;symbol&#39;: &#39;SHIB&#39;, &#39;name&#39;: &#39;Shiba Inu&#39;, &#39;supply&#39;: &#39;549063278876301.9400000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;5662021938.5845618722995039&#39;, &#39;volumeUsd24Hr&#39;: &#39;100288101.7713762492418262&#39;, &#39;priceUsd&#39;: &#39;0.0000103121482649&#39;, &#39;changePercent24Hr&#39;: &#39;1.0270035961667778&#39;, &#39;vwap24Hr&#39;: &#39;0.0000103223235512&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce&#39;}, {&#39;id&#39;: &#39;uniswap&#39;, &#39;rank&#39;: &#39;17&#39;, &#39;symbol&#39;: &#39;UNI&#39;, &#39;name&#39;: &#39;Uniswap&#39;, &#39;supply&#39;: &#39;762209326.5354977000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;4868396474.6071149021640861&#39;, &#39;volumeUsd24Hr&#39;: &#39;42567866.7425796449037153&#39;, &#39;priceUsd&#39;: &#39;6.3872171398579487&#39;, &#39;changePercent24Hr&#39;: &#39;5.7944401079707136&#39;, &#39;vwap24Hr&#39;: &#39;6.2046248691240811&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984&#39;}, {&#39;id&#39;: &#39;wrapped-bitcoin&#39;, &#39;rank&#39;: &#39;18&#39;, &#39;symbol&#39;: &#39;WBTC&#39;, &#39;name&#39;: &#39;Wrapped Bitcoin&#39;, &#39;supply&#39;: &#39;244655.8613710500000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;4770045491.7829020620388383&#39;, &#39;volumeUsd24Hr&#39;: &#39;110371059.7397462458095539&#39;, &#39;priceUsd&#39;: &#39;19496.9597909961990716&#39;, &#39;changePercent24Hr&#39;: &#39;1.8611237024236757&#39;, &#39;vwap24Hr&#39;: &#39;19361.2880653204587566&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599&#39;}, {&#39;id&#39;: &#39;avalanche&#39;, &#39;rank&#39;: &#39;19&#39;, &#39;symbol&#39;: &#39;AVAX&#39;, &#39;name&#39;: &#39;Avalanche&#39;, &#39;supply&#39;: &#39;296377420.2857675000000000&#39;, &#39;maxSupply&#39;: &#39;720000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;4754999892.4447401322756633&#39;, &#39;volumeUsd24Hr&#39;: &#39;53460402.4072405292686750&#39;, &#39;priceUsd&#39;: &#39;16.0437319680425147&#39;, &#39;changePercent24Hr&#39;: &#39;2.9373932572190461&#39;, &#39;vwap24Hr&#39;: &#39;15.9231843607937715&#39;, &#39;explorer&#39;: &#39;https://avascan.info/&#39;}, {&#39;id&#39;: &#39;steth&#39;, &#39;rank&#39;: &#39;20&#39;, &#39;symbol&#39;: &#39;STETH&#39;, &#39;name&#39;: &#39;Lido Staked ETH&#39;, &#39;supply&#39;: &#39;3487728.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;4496187219.1641510869727792&#39;, &#39;volumeUsd24Hr&#39;: &#39;120495.6125199389698992&#39;, &#39;priceUsd&#39;: &#39;1289.1450305655002589&#39;, &#39;changePercent24Hr&#39;: &#39;3.6416120135470332&#39;, &#39;vwap24Hr&#39;: &#39;1310.5536145655536799&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xae7ab96520de3a18e5e111b5eaab095312d7fe84&#39;}, {&#39;id&#39;: &#39;unus-sed-leo&#39;, &#39;rank&#39;: &#39;21&#39;, &#39;symbol&#39;: &#39;LEO&#39;, &#39;name&#39;: &#39;UNUS SED LEO&#39;, &#39;supply&#39;: &#39;953954130.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;4263305681.2939211500195380&#39;, &#39;volumeUsd24Hr&#39;: &#39;1784255.1764481498352123&#39;, &#39;priceUsd&#39;: &#39;4.4690887614207626&#39;, &#39;changePercent24Hr&#39;: &#39;-0.4584385420493510&#39;, &#39;vwap24Hr&#39;: &#39;4.4944626231839285&#39;, &#39;explorer&#39;: &#39;https://eospark.com/account/bitfinexleo1&#39;}, {&#39;id&#39;: &#39;litecoin&#39;, &#39;rank&#39;: &#39;22&#39;, &#39;symbol&#39;: &#39;LTC&#39;, &#39;name&#39;: &#39;Litecoin&#39;, &#39;supply&#39;: &#39;71406343.7305058800000000&#39;, &#39;maxSupply&#39;: &#39;84000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;3692246768.5717271074778098&#39;, &#39;volumeUsd24Hr&#39;: &#39;84542500.2411697353151732&#39;, &#39;priceUsd&#39;: &#39;51.7075455159363233&#39;, &#39;changePercent24Hr&#39;: &#39;1.4051263935943094&#39;, &#39;vwap24Hr&#39;: &#39;51.5649337726901040&#39;, &#39;explorer&#39;: &#39;http://explorer.litecoin.net/chain/Litecoin&#39;}, {&#39;id&#39;: &#39;chainlink&#39;, &#39;rank&#39;: &#39;23&#39;, &#39;symbol&#39;: &#39;LINK&#39;, &#39;name&#39;: &#39;Chainlink&#39;, &#39;supply&#39;: &#39;491599970.4527867000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;3556994748.1095662604488827&#39;, &#39;volumeUsd24Hr&#39;: &#39;88079779.6780820924269308&#39;, &#39;priceUsd&#39;: &#39;7.2355471153373072&#39;, &#39;changePercent24Hr&#39;: &#39;2.4462200415667127&#39;, &#39;vwap24Hr&#39;: &#39;7.2087324926468965&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca&#39;}, {&#39;id&#39;: &#39;ethereum-classic&#39;, &#39;rank&#39;: &#39;24&#39;, &#39;symbol&#39;: &#39;ETC&#39;, &#39;name&#39;: &#39;Ethereum Classic&#39;, &#39;supply&#39;: &#39;137426412.6341959200000000&#39;, &#39;maxSupply&#39;: &#39;210700000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;3259713910.1021126212876836&#39;, &#39;volumeUsd24Hr&#39;: &#39;10134807023.6692053567607788&#39;, &#39;priceUsd&#39;: &#39;23.7197045867658449&#39;, &#39;changePercent24Hr&#39;: &#39;3.5644005049939147&#39;, &#39;vwap24Hr&#39;: &#39;23.3598239100359982&#39;, &#39;explorer&#39;: &#39;http://gastracker.io/&#39;}, {&#39;id&#39;: &#39;ftx-token&#39;, &#39;rank&#39;: &#39;25&#39;, &#39;symbol&#39;: &#39;FTT&#39;, &#39;name&#39;: &#39;FTX Token&#39;, &#39;supply&#39;: &#39;133975252.6599967300000000&#39;, &#39;maxSupply&#39;: &#39;352170015.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;3222696123.5362047874548133&#39;, &#39;volumeUsd24Hr&#39;: &#39;21192538.6322200070050335&#39;, &#39;priceUsd&#39;: &#39;24.0544134797400534&#39;, &#39;changePercent24Hr&#39;: &#39;2.1342098016065581&#39;, &#39;vwap24Hr&#39;: &#39;23.8122393463117144&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x50d1c9771902476076ecfc8b2a83ad6b9355a4c9&#39;}, {&#39;id&#39;: &#39;cosmos&#39;, &#39;rank&#39;: &#39;26&#39;, &#39;symbol&#39;: &#39;ATOM&#39;, &#39;name&#39;: &#39;Cosmos&#39;, &#39;supply&#39;: &#39;248453201.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;3044218877.8075687442716825&#39;, &#39;volumeUsd24Hr&#39;: &#39;93578602.4503572959627817&#39;, &#39;priceUsd&#39;: &#39;12.2526852765626825&#39;, &#39;changePercent24Hr&#39;: &#39;6.1478668375355143&#39;, &#39;vwap24Hr&#39;: &#39;12.0185031647562042&#39;, &#39;explorer&#39;: &#39;https://www.mintscan.io/&#39;}, {&#39;id&#39;: &#39;stellar&#39;, &#39;rank&#39;: &#39;27&#39;, &#39;symbol&#39;: &#39;XLM&#39;, &#39;name&#39;: &#39;Stellar&#39;, &#39;supply&#39;: &#39;25610840597.5830960000000000&#39;, &#39;maxSupply&#39;: &#39;50001806812.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2915383750.5441495780527385&#39;, &#39;volumeUsd24Hr&#39;: &#39;30936143.6100039045326993&#39;, &#39;priceUsd&#39;: &#39;0.1138339735252296&#39;, &#39;changePercent24Hr&#39;: &#39;1.1415525533134748&#39;, &#39;vwap24Hr&#39;: &#39;0.1137269939287607&#39;, &#39;explorer&#39;: &#39;https://dashboard.stellar.org/&#39;}, {&#39;id&#39;: &#39;crypto-com-coin&#39;, &#39;rank&#39;: &#39;28&#39;, &#39;symbol&#39;: &#39;CRO&#39;, &#39;name&#39;: &#39;Crypto.com Coin&#39;, &#39;supply&#39;: &#39;25263013692.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;30263013692.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2750378512.3519245591060192&#39;, &#39;volumeUsd24Hr&#39;: &#39;20192860.6325177062149388&#39;, &#39;priceUsd&#39;: &#39;0.1088697708786376&#39;, &#39;changePercent24Hr&#39;: &#39;4.2885177532572802&#39;, &#39;vwap24Hr&#39;: &#39;0.1072205192234606&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b&#39;}, {&#39;id&#39;: &#39;monero&#39;, &#39;rank&#39;: &#39;29&#39;, &#39;symbol&#39;: &#39;XMR&#39;, &#39;name&#39;: &#39;Monero&#39;, &#39;supply&#39;: &#39;18188575.2345529600000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;2601941529.7925445186183150&#39;, &#39;volumeUsd24Hr&#39;: &#39;37100549.5388669371213737&#39;, &#39;priceUsd&#39;: &#39;143.0536199916098161&#39;, &#39;changePercent24Hr&#39;: &#39;0.9771111563192560&#39;, &#39;vwap24Hr&#39;: &#39;143.6241376515936342&#39;, &#39;explorer&#39;: &#39;http://moneroblocks.info/&#39;}, {&#39;id&#39;: &#39;quant&#39;, &#39;rank&#39;: &#39;30&#39;, &#39;symbol&#39;: &#39;QNT&#39;, &#39;name&#39;: &#39;Quant&#39;, &#39;supply&#39;: &#39;12072738.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;14612493.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2462142516.7717158925336182&#39;, &#39;volumeUsd24Hr&#39;: &#39;162590213.9257540399769612&#39;, &#39;priceUsd&#39;: &#39;203.9423465308131339&#39;, &#39;changePercent24Hr&#39;: &#39;10.4816683250904262&#39;, &#39;vwap24Hr&#39;: &#39;208.0700447108064676&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x4a220e6096b25eadb88358cb44068a3248254675&#39;}, {&#39;id&#39;: &#39;near-protocol&#39;, &#39;rank&#39;: &#39;31&#39;, &#39;symbol&#39;: &#39;NEAR&#39;, &#39;name&#39;: &#39;NEAR Protocol&#39;, &#39;supply&#39;: &#39;812197570.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2452918853.0190477503834300&#39;, &#39;volumeUsd24Hr&#39;: &#39;28885668.2190659260980781&#39;, &#39;priceUsd&#39;: &#39;3.0201011965832990&#39;, &#39;changePercent24Hr&#39;: &#39;1.2667233615862920&#39;, &#39;vwap24Hr&#39;: &#39;3.0145914805586157&#39;, &#39;explorer&#39;: &#39;https://explorer.nearprotocol.com/&#39;}, {&#39;id&#39;: &#39;algorand&#39;, &#39;rank&#39;: &#39;32&#39;, &#39;symbol&#39;: &#39;ALGO&#39;, &#39;name&#39;: &#39;Algorand&#39;, &#39;supply&#39;: &#39;7018093637.6601440000000000&#39;, &#39;maxSupply&#39;: &#39;10000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2316116983.4054442954261499&#39;, &#39;volumeUsd24Hr&#39;: &#39;26776901.0480487841005111&#39;, &#39;priceUsd&#39;: &#39;0.3300208151935752&#39;, &#39;changePercent24Hr&#39;: &#39;2.6414744061017547&#39;, &#39;vwap24Hr&#39;: &#39;0.3250188678785837&#39;, &#39;explorer&#39;: &#39;https://algoexplorer.io/&#39;}, {&#39;id&#39;: &#39;bitcoin-cash&#39;, &#39;rank&#39;: &#39;33&#39;, &#39;symbol&#39;: &#39;BCH&#39;, &#39;name&#39;: &#39;Bitcoin Cash&#39;, &#39;supply&#39;: &#39;19203468.7500000000000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;2109693863.6143654346242313&#39;, &#39;volumeUsd24Hr&#39;: &#39;33003985.2281902786105783&#39;, &#39;priceUsd&#39;: &#39;109.8600409686070614&#39;, &#39;changePercent24Hr&#39;: &#39;0.4154199692519869&#39;, &#39;vwap24Hr&#39;: &#39;110.3744489722974474&#39;, &#39;explorer&#39;: &#39;https://blockchair.com/bitcoin-cash/blocks&#39;}, {&#39;id&#39;: &#39;bitcoin-bep2&#39;, &#39;rank&#39;: &#39;34&#39;, &#39;symbol&#39;: &#39;BTCB&#39;, &#39;name&#39;: &#39;Bitcoin BEP2&#39;, &#39;supply&#39;: &#39;105375.9798717600000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;2054971488.3178038829784139&#39;, &#39;volumeUsd24Hr&#39;: &#39;2434147218.6189424918241667&#39;, &#39;priceUsd&#39;: &#39;19501.3274450083796566&#39;, &#39;changePercent24Hr&#39;: &#39;1.8890227307164906&#39;, &#39;vwap24Hr&#39;: &#39;19390.4069615944330054&#39;, &#39;explorer&#39;: &#39;https://explorer.binance.org/asset/BTCB-1DE&#39;}, {&#39;id&#39;: &#39;vechain&#39;, &#39;rank&#39;: &#39;35&#39;, &#39;symbol&#39;: &#39;VET&#39;, &#39;name&#39;: &#39;VeChain&#39;, &#39;supply&#39;: &#39;72511146418.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;86712634466.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1669087917.6468642707656354&#39;, &#39;volumeUsd24Hr&#39;: &#39;14224479.1322465933239095&#39;, &#39;priceUsd&#39;: &#39;0.0230183633840953&#39;, &#39;changePercent24Hr&#39;: &#39;0.8764402309471556&#39;, &#39;vwap24Hr&#39;: &#39;0.0230574555980914&#39;, &#39;explorer&#39;: &#39;https://explore.veforge.com/&#39;}, {&#39;id&#39;: &#39;flow&#39;, &#39;rank&#39;: &#39;36&#39;, &#39;symbol&#39;: &#39;FLOW&#39;, &#39;name&#39;: &#39;Flow&#39;, &#39;supply&#39;: &#39;1036200000.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1576433578.0833148020600000&#39;, &#39;volumeUsd24Hr&#39;: &#39;15443004.9819722199691212&#39;, &#39;priceUsd&#39;: &#39;1.5213603339927763&#39;, &#39;changePercent24Hr&#39;: &#39;2.6867572447045321&#39;, &#39;vwap24Hr&#39;: &#39;1.5075501079186455&#39;, &#39;explorer&#39;: &#39;https://flowscan.org/&#39;}, {&#39;id&#39;: &#39;filecoin&#39;, &#39;rank&#39;: &#39;37&#39;, &#39;symbol&#39;: &#39;FIL&#39;, &#39;name&#39;: &#39;Filecoin&#39;, &#39;supply&#39;: &#39;299430343.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1564772166.5608849021519758&#39;, &#39;volumeUsd24Hr&#39;: &#39;67816958.7210289271741530&#39;, &#39;priceUsd&#39;: &#39;5.2258303246203906&#39;, &#39;changePercent24Hr&#39;: &#39;2.2551583686191830&#39;, &#39;vwap24Hr&#39;: &#39;5.1754161668282108&#39;, &#39;explorer&#39;: &#39;https://protocol.ai&#39;}, {&#39;id&#39;: &#39;frax&#39;, &#39;rank&#39;: &#39;38&#39;, &#39;symbol&#39;: &#39;FRAX&#39;, &#39;name&#39;: &#39;Frax&#39;, &#39;supply&#39;: &#39;1363108793.4940548000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1363303685.5118622856344760&#39;, &#39;volumeUsd24Hr&#39;: &#39;189687.9355889920466504&#39;, &#39;priceUsd&#39;: &#39;1.0001429761283455&#39;, &#39;changePercent24Hr&#39;: &#39;0.0833209818310029&#39;, &#39;vwap24Hr&#39;: &#39;1.0016858085275468&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x853d955acef822db058eb8505911ed77f175b99e&#39;}, {&#39;id&#39;: &#39;internet-computer&#39;, &#39;rank&#39;: &#39;39&#39;, &#39;symbol&#39;: &#39;ICP&#39;, &#39;name&#39;: &#39;Internet Computer&#39;, &#39;supply&#39;: &#39;268386467.7496954500000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1354590140.5063752969770371&#39;, &#39;volumeUsd24Hr&#39;: &#39;13386596.7547385674288446&#39;, &#39;priceUsd&#39;: &#39;5.0471625930473628&#39;, &#39;changePercent24Hr&#39;: &#39;2.1087196159706724&#39;, &#39;vwap24Hr&#39;: &#39;5.0518311910721709&#39;, &#39;explorer&#39;: &#39;https://www.dfinityexplorer.org/#/&#39;}, {&#39;id&#39;: &#39;elrond-egld&#39;, &#39;rank&#39;: &#39;40&#39;, &#39;symbol&#39;: &#39;EGLD&#39;, &#39;name&#39;: &#39;Elrond&#39;, &#39;supply&#39;: &#39;23572909.6895094600000000&#39;, &#39;maxSupply&#39;: &#39;31415926.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1330310812.9666795046995883&#39;, &#39;volumeUsd24Hr&#39;: &#39;15008340.3604796559668474&#39;, &#39;priceUsd&#39;: &#39;56.4338823882527071&#39;, &#39;changePercent24Hr&#39;: &#39;0.0909437969423009&#39;, &#39;vwap24Hr&#39;: &#39;56.0926160506274342&#39;, &#39;explorer&#39;: &#39;https://explorer.elrond.com/&#39;}, {&#39;id&#39;: &#39;tezos&#39;, &#39;rank&#39;: &#39;41&#39;, &#39;symbol&#39;: &#39;XTZ&#39;, &#39;name&#39;: &#39;Tezos&#39;, &#39;supply&#39;: &#39;912816215.7238060000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1257791511.8408091660111851&#39;, &#39;volumeUsd24Hr&#39;: &#39;7639871.2146944429076786&#39;, &#39;priceUsd&#39;: &#39;1.3779241540351684&#39;, &#39;changePercent24Hr&#39;: &#39;2.2787038870568476&#39;, &#39;vwap24Hr&#39;: &#39;1.3625811585276841&#39;, &#39;explorer&#39;: &#39;https://tzkt.io/&#39;}, {&#39;id&#39;: &#39;huobi-token&#39;, &#39;rank&#39;: &#39;42&#39;, &#39;symbol&#39;: &#39;HT&#39;, &#39;name&#39;: &#39;Huobi Token&#39;, &#39;supply&#39;: &#39;153357694.2544120800000000&#39;, &#39;maxSupply&#39;: &#39;500000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1228855914.9755389004742874&#39;, &#39;volumeUsd24Hr&#39;: &#39;64015337.9483546923944361&#39;, &#39;priceUsd&#39;: &#39;8.0130046356652554&#39;, &#39;changePercent24Hr&#39;: &#39;14.0138921516611128&#39;, &#39;vwap24Hr&#39;: &#39;7.3835566121975365&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x6f259637dcd74c767781e37bc6133cd6a68aa161&#39;}, {&#39;id&#39;: &#39;decentraland&#39;, &#39;rank&#39;: &#39;43&#39;, &#39;symbol&#39;: &#39;MANA&#39;, &#39;name&#39;: &#39;Decentraland&#39;, &#39;supply&#39;: &#39;1855084191.7804768000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1192011890.9555312188517286&#39;, &#39;volumeUsd24Hr&#39;: &#39;17971765.7768190777920369&#39;, &#39;priceUsd&#39;: &#39;0.6425648475886474&#39;, &#39;changePercent24Hr&#39;: &#39;1.2543327644259392&#39;, &#39;vwap24Hr&#39;: &#39;0.6418361289914608&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/decentraland&#39;}, {&#39;id&#39;: &#39;the-sandbox&#39;, &#39;rank&#39;: &#39;44&#39;, &#39;symbol&#39;: &#39;SAND&#39;, &#39;name&#39;: &#39;The Sandbox&#39;, &#39;supply&#39;: &#39;1499470108.2233226000000000&#39;, &#39;maxSupply&#39;: &#39;3000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1174648203.1103320377801057&#39;, &#39;volumeUsd24Hr&#39;: &#39;31396842.1950375479980790&#39;, &#39;priceUsd&#39;: &#39;0.7833755382440652&#39;, &#39;changePercent24Hr&#39;: &#39;1.4818189159607920&#39;, &#39;vwap24Hr&#39;: &#39;0.7823614432253220&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x3845badAde8e6dFF049820680d1F14bD3903a5d0&#39;}, {&#39;id&#39;: &#39;aave&#39;, &#39;rank&#39;: &#39;45&#39;, &#39;symbol&#39;: &#39;AAVE&#39;, &#39;name&#39;: &#39;Aave&#39;, &#39;supply&#39;: &#39;14093192.5805645900000000&#39;, &#39;maxSupply&#39;: &#39;16000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1114469775.3472143996428081&#39;, &#39;volumeUsd24Hr&#39;: &#39;43475357.6317295690082049&#39;, &#39;priceUsd&#39;: &#39;79.0785884019025744&#39;, &#39;changePercent24Hr&#39;: &#39;6.7439514881059473&#39;, &#39;vwap24Hr&#39;: &#39;76.9402053198693539&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x80fB784B7eD66730e8b1DBd9820aFD29931aab03&#39;}, {&#39;id&#39;: &#39;chiliz&#39;, &#39;rank&#39;: &#39;46&#39;, &#39;symbol&#39;: &#39;CHZ&#39;, &#39;name&#39;: &#39;Chiliz&#39;, &#39;supply&#39;: &#39;6000386952.7303880000000000&#39;, &#39;maxSupply&#39;: &#39;8888888888.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1106177877.7197919328161862&#39;, &#39;volumeUsd24Hr&#39;: &#39;44930613.7019449471294241&#39;, &#39;priceUsd&#39;: &#39;0.1843510904270002&#39;, &#39;changePercent24Hr&#39;: &#39;2.3522101662625094&#39;, &#39;vwap24Hr&#39;: &#39;0.1829870285062032&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x3506424f91fd33084466f402d5d97f05f8e3b4af&#39;}, {&#39;id&#39;: &#39;maker&#39;, &#39;rank&#39;: &#39;47&#39;, &#39;symbol&#39;: &#39;MKR&#39;, &#39;name&#39;: &#39;Maker&#39;, &#39;supply&#39;: &#39;977631.0369508900000000&#39;, &#39;maxSupply&#39;: &#39;1005577.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1072852367.2660131173962228&#39;, &#39;volumeUsd24Hr&#39;: &#39;39695534.1787656397480814&#39;, &#39;priceUsd&#39;: &#39;1097.4000688563516164&#39;, &#39;changePercent24Hr&#39;: &#39;10.0788592552601092&#39;, &#39;vwap24Hr&#39;: &#39;1035.7270702573882280&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/Maker&#39;}, {&#39;id&#39;: &#39;eos&#39;, &#39;rank&#39;: &#39;48&#39;, &#39;symbol&#39;: &#39;EOS&#39;, &#39;name&#39;: &#39;EOS&#39;, &#39;supply&#39;: &#39;1003447983.5528000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1055013443.4644269805843704&#39;, &#39;volumeUsd24Hr&#39;: &#39;43331337.3788048576138373&#39;, &#39;priceUsd&#39;: &#39;1.0513882739881092&#39;, &#39;changePercent24Hr&#39;: &#39;0.7432474892384309&#39;, &#39;vwap24Hr&#39;: &#39;1.0508314507843517&#39;, &#39;explorer&#39;: &#39;https://bloks.io/&#39;}, {&#39;id&#39;: &#39;theta&#39;, &#39;rank&#39;: &#39;49&#39;, &#39;symbol&#39;: &#39;THETA&#39;, &#39;name&#39;: &#39;THETA&#39;, &#39;supply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;1002595053.6132063000000000&#39;, &#39;volumeUsd24Hr&#39;: &#39;11198452.5486957762175465&#39;, &#39;priceUsd&#39;: &#39;1.0025950536132063&#39;, &#39;changePercent24Hr&#39;: &#39;0.7327229467497266&#39;, &#39;vwap24Hr&#39;: &#39;1.0094681355267672&#39;, &#39;explorer&#39;: &#39;https://explorer.thetatoken.org/&#39;}, {&#39;id&#39;: &#39;okb&#39;, &#39;rank&#39;: &#39;50&#39;, &#39;symbol&#39;: &#39;OKB&#39;, &#39;name&#39;: &#39;OKB&#39;, &#39;supply&#39;: &#39;60000000.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;1000596407.8659300960000000&#39;, &#39;volumeUsd24Hr&#39;: &#39;1107840.8601813464667017&#39;, &#39;priceUsd&#39;: &#39;16.6766067977655016&#39;, &#39;changePercent24Hr&#39;: &#39;0.6335627199312272&#39;, &#39;vwap24Hr&#39;: &#39;16.6515159268093424&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x75231f58b43240c9718dd58b4967c5114342a86c&#39;}, {&#39;id&#39;: &#39;kucoin-token&#39;, &#39;rank&#39;: &#39;51&#39;, &#39;symbol&#39;: &#39;KCS&#39;, &#39;name&#39;: &#39;KuCoin Token&#39;, &#39;supply&#39;: &#39;98379860.9500000000000000&#39;, &#39;maxSupply&#39;: &#39;170118638.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;969855485.0376029621260621&#39;, &#39;volumeUsd24Hr&#39;: &#39;1099807.4724519574469316&#39;, &#39;priceUsd&#39;: &#39;9.8582725740028906&#39;, &#39;changePercent24Hr&#39;: &#39;1.4657547143533500&#39;, &#39;vwap24Hr&#39;: &#39;9.8124738547419227&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xf34960d9d60be18cc1d5afc1a6f012a723a28811&#39;}, {&#39;id&#39;: &#39;bitcoin-sv&#39;, &#39;rank&#39;: &#39;52&#39;, &#39;symbol&#39;: &#39;BSV&#39;, &#39;name&#39;: &#39;Bitcoin SV&#39;, &#39;supply&#39;: &#39;19198714.1442390500000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;938027837.5816428673615803&#39;, &#39;volumeUsd24Hr&#39;: &#39;13487156.4350928045233693&#39;, &#39;priceUsd&#39;: &#39;48.8588887013100553&#39;, &#39;changePercent24Hr&#39;: &#39;0.6169385541667117&#39;, &#39;vwap24Hr&#39;: &#39;48.6894969019462203&#39;, &#39;explorer&#39;: &#39;https://bsvexplorer.io/&#39;}, {&#39;id&#39;: &#39;paxos-standard&#39;, &#39;rank&#39;: &#39;53&#39;, &#39;symbol&#39;: &#39;USDP&#39;, &#39;name&#39;: &#39;Pax Dollar&#39;, &#39;supply&#39;: &#39;945642940.1100000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;932568790.7692939167207714&#39;, &#39;volumeUsd24Hr&#39;: &#39;472968.4088182477973022&#39;, &#39;priceUsd&#39;: &#39;0.9861743277656308&#39;, &#39;changePercent24Hr&#39;: &#39;-0.6369815407274049&#39;, &#39;vwap24Hr&#39;: None, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x8e870d67f660d95d5be530380d0ec0bd388289e1&#39;}, {&#39;id&#39;: &#39;axie-infinity&#39;, &#39;rank&#39;: &#39;54&#39;, &#39;symbol&#39;: &#39;AXS&#39;, &#39;name&#39;: &#39;Axie Infinity&#39;, &#39;supply&#39;: &#39;83056186.6703397500000000&#39;, &#39;maxSupply&#39;: &#39;270000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;920795763.0888078847798399&#39;, &#39;volumeUsd24Hr&#39;: &#39;11056424.3123594316117195&#39;, &#39;priceUsd&#39;: &#39;11.0864199285185082&#39;, &#39;changePercent24Hr&#39;: &#39;1.1557923466230439&#39;, &#39;vwap24Hr&#39;: &#39;11.0716782305708306&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xf5d669627376ebd411e34b98f19c868c8aba5ada&#39;}, {&#39;id&#39;: &#39;hedera-hashgraph&#39;, &#39;rank&#39;: &#39;55&#39;, &#39;symbol&#39;: &#39;HBAR&#39;, &#39;name&#39;: &#39;Hedera Hashgraph&#39;, &#39;supply&#39;: &#39;14832756028.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;50000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;916730304.2140403603869572&#39;, &#39;volumeUsd24Hr&#39;: &#39;15738806.0446574573660741&#39;, &#39;priceUsd&#39;: &#39;0.0618044483765199&#39;, &#39;changePercent24Hr&#39;: &#39;1.8130222333415319&#39;, &#39;vwap24Hr&#39;: &#39;0.0615096172360250&#39;, &#39;explorer&#39;: &#39;https://hash-hash.info/&#39;}, {&#39;id&#39;: &#39;trueusd&#39;, &#39;rank&#39;: &#39;56&#39;, &#39;symbol&#39;: &#39;TUSD&#39;, &#39;name&#39;: &#39;TrueUSD&#39;, &#39;supply&#39;: &#39;876594633.8211870000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;877138169.0330674465725340&#39;, &#39;volumeUsd24Hr&#39;: &#39;14171768.1484128239537617&#39;, &#39;priceUsd&#39;: &#39;1.0006200530905729&#39;, &#39;changePercent24Hr&#39;: &#39;0.0991022192913327&#39;, &#39;vwap24Hr&#39;: &#39;1.0002815862514010&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x8dd5fbce2f6a956c3022ba3663759011dd51e73e&#39;}, {&#39;id&#39;: &#39;zcash&#39;, &#39;rank&#39;: &#39;57&#39;, &#39;symbol&#39;: &#39;ZEC&#39;, &#39;name&#39;: &#39;Zcash&#39;, &#39;supply&#39;: &#39;15500281.2500000000000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;823499813.1283668781024750&#39;, &#39;volumeUsd24Hr&#39;: &#39;30989692.9239836132870516&#39;, &#39;priceUsd&#39;: &#39;53.1280561846816088&#39;, &#39;changePercent24Hr&#39;: &#39;2.5451501982564967&#39;, &#39;vwap24Hr&#39;: &#39;52.4422592078277276&#39;, &#39;explorer&#39;: &#39;https://explorer.zcha.in/&#39;}, {&#39;id&#39;: &#39;ecash&#39;, &#39;rank&#39;: &#39;58&#39;, &#39;symbol&#39;: &#39;XEC&#39;, &#39;name&#39;: &#39;eCash&#39;, &#39;supply&#39;: &#39;19200410923303.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;21000000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;727215217.1277234251805561&#39;, &#39;volumeUsd24Hr&#39;: &#39;2072523.4459734891226838&#39;, &#39;priceUsd&#39;: &#39;0.0000378749819487&#39;, &#39;changePercent24Hr&#39;: &#39;1.8801634878415447&#39;, &#39;vwap24Hr&#39;: &#39;0.0000375911388966&#39;, &#39;explorer&#39;: &#39;https://explorer.bitcoinabc.org/&#39;}, {&#39;id&#39;: &#39;iota&#39;, &#39;rank&#39;: &#39;59&#39;, &#39;symbol&#39;: &#39;MIOTA&#39;, &#39;name&#39;: &#39;IOTA&#39;, &#39;supply&#39;: &#39;2779530283.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;2779530283.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;702241273.7382056553248584&#39;, &#39;volumeUsd24Hr&#39;: &#39;4018490.3242342022791147&#39;, &#39;priceUsd&#39;: &#39;0.2526474627865048&#39;, &#39;changePercent24Hr&#39;: &#39;0.0319326339873234&#39;, &#39;vwap24Hr&#39;: &#39;0.2542131229417639&#39;, &#39;explorer&#39;: &#39;https://thetangle.org/&#39;}, {&#39;id&#39;: &#39;pancakeswap&#39;, &#39;rank&#39;: &#39;60&#39;, &#39;symbol&#39;: &#39;CAKE&#39;, &#39;name&#39;: &#39;PancakeSwap&#39;, &#39;supply&#39;: &#39;142349646.3342205600000000&#39;, &#39;maxSupply&#39;: &#39;750000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;660424075.5933315323465625&#39;, &#39;volumeUsd24Hr&#39;: &#39;9817803.9223509904080115&#39;, &#39;priceUsd&#39;: &#39;4.6394500625785324&#39;, &#39;changePercent24Hr&#39;: &#39;1.8746256357771837&#39;, &#39;vwap24Hr&#39;: &#39;4.6164361896968932&#39;, &#39;explorer&#39;: &#39;https://bscscan.com/token/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82&#39;}, {&#39;id&#39;: &#39;the-graph&#39;, &#39;rank&#39;: &#39;61&#39;, &#39;symbol&#39;: &#39;GRT&#39;, &#39;name&#39;: &#39;The Graph&#39;, &#39;supply&#39;: &#39;6900000000.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;10057044431.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;596381266.7751951000000000&#39;, &#39;volumeUsd24Hr&#39;: &#39;9186320.9036147787405311&#39;, &#39;priceUsd&#39;: &#39;0.0864320676485790&#39;, &#39;changePercent24Hr&#39;: &#39;1.8040788042821916&#39;, &#39;vwap24Hr&#39;: &#39;0.0862759665414502&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xc944e90c64b2c07662a292be6244bdf05cda44a7&#39;}, {&#39;id&#39;: &#39;helium&#39;, &#39;rank&#39;: &#39;62&#39;, &#39;symbol&#39;: &#39;HNT&#39;, &#39;name&#39;: &#39;Helium&#39;, &#39;supply&#39;: &#39;128575296.3827378000000000&#39;, &#39;maxSupply&#39;: &#39;223000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;584129363.6085985862614790&#39;, &#39;volumeUsd24Hr&#39;: &#39;655811185.3010418730648208&#39;, &#39;priceUsd&#39;: &#39;4.5430917138995788&#39;, &#39;changePercent24Hr&#39;: &#39;-1.7727044428721087&#39;, &#39;vwap24Hr&#39;: &#39;4.5374926445133192&#39;, &#39;explorer&#39;: &#39;https://explorer.helium.com/&#39;}, {&#39;id&#39;: &#39;neo&#39;, &#39;rank&#39;: &#39;63&#39;, &#39;symbol&#39;: &#39;NEO&#39;, &#39;name&#39;: &#39;Neo&#39;, &#39;supply&#39;: &#39;70538831.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;100000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;563073315.4206530158228396&#39;, &#39;volumeUsd24Hr&#39;: &#39;8606103.3485532147257780&#39;, &#39;priceUsd&#39;: &#39;7.9824588448404116&#39;, &#39;changePercent24Hr&#39;: &#39;1.8856028661831055&#39;, &#39;vwap24Hr&#39;: &#39;7.9542687369416198&#39;, &#39;explorer&#39;: &#39;https://neotracker.io&#39;}, {&#39;id&#39;: &#39;synthetix-network-token&#39;, &#39;rank&#39;: &#39;64&#39;, &#39;symbol&#39;: &#39;SNX&#39;, &#39;name&#39;: &#39;Synthetix&#39;, &#39;supply&#39;: &#39;233716733.4900000000000000&#39;, &#39;maxSupply&#39;: &#39;212424133.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;540807952.9085214656357683&#39;, &#39;volumeUsd24Hr&#39;: &#39;43425177.1329219053946074&#39;, &#39;priceUsd&#39;: &#39;2.3139462238447763&#39;, &#39;changePercent24Hr&#39;: &#39;3.6335782076862986&#39;, &#39;vwap24Hr&#39;: &#39;2.3111602163754269&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xc011a72400e58ecd99ee497cf89e3775d4bd732f&#39;}, {&#39;id&#39;: &#39;casper&#39;, &#39;rank&#39;: &#39;65&#39;, &#39;symbol&#39;: &#39;CSPR&#39;, &#39;name&#39;: &#39;Casper&#39;, &#39;supply&#39;: &#39;10429041756.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;536426659.7472231776097624&#39;, &#39;volumeUsd24Hr&#39;: &#39;42062888.9588288755937513&#39;, &#39;priceUsd&#39;: &#39;0.0514358531011354&#39;, &#39;changePercent24Hr&#39;: &#39;4.9330530535067061&#39;, &#39;vwap24Hr&#39;: &#39;0.0497034756939821&#39;, &#39;explorer&#39;: &#39;https://casperstats.io/&#39;}, {&#39;id&#39;: &#39;pax-gold&#39;, &#39;rank&#39;: &#39;66&#39;, &#39;symbol&#39;: &#39;PAXG&#39;, &#39;name&#39;: &#39;PAX Gold&#39;, &#39;supply&#39;: &#39;325209.4810000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;535598727.1668562336956017&#39;, &#39;volumeUsd24Hr&#39;: &#39;2920507.6825777391287808&#39;, &#39;priceUsd&#39;: &#39;1646.9345405303735093&#39;, &#39;changePercent24Hr&#39;: &#39;0.4265783256028553&#39;, &#39;vwap24Hr&#39;: &#39;1647.2192239096791588&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x45804880de22913dafe09f4980848ece6ecbaf78&#39;}, {&#39;id&#39;: &#39;fantom&#39;, &#39;rank&#39;: &#39;67&#39;, &#39;symbol&#39;: &#39;FTM&#39;, &#39;name&#39;: &#39;Fantom&#39;, &#39;supply&#39;: &#39;2545006273.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;3175000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;532703375.7863997983820072&#39;, &#39;volumeUsd24Hr&#39;: &#39;18102428.0622757581693366&#39;, &#39;priceUsd&#39;: &#39;0.2093131877268264&#39;, &#39;changePercent24Hr&#39;: &#39;2.1116234123825231&#39;, &#39;vwap24Hr&#39;: &#39;0.2084635788686377&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x4e15361fd6b4bb609fa63c81a2be19d873717870&#39;}, {&#39;id&#39;: &#39;thorchain&#39;, &#39;rank&#39;: &#39;68&#39;, &#39;symbol&#39;: &#39;RUNE&#39;, &#39;name&#39;: &#39;THORChain&#39;, &#39;supply&#39;: &#39;330688061.3344559700000000&#39;, &#39;maxSupply&#39;: &#39;500000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;502996074.3303416535570184&#39;, &#39;volumeUsd24Hr&#39;: &#39;22486567.5058233414128162&#39;, &#39;priceUsd&#39;: &#39;1.5210590678736792&#39;, &#39;changePercent24Hr&#39;: &#39;4.1669801819183933&#39;, &#39;vwap24Hr&#39;: &#39;1.5084872353467457&#39;, &#39;explorer&#39;: &#39;https://explorer.binance.org/asset/RUNE-B1A&#39;}, {&#39;id&#39;: &#39;nexo&#39;, &#39;rank&#39;: &#39;69&#39;, &#39;symbol&#39;: &#39;NEXO&#39;, &#39;name&#39;: &#39;Nexo&#39;, &#39;supply&#39;: &#39;560000011.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;492849870.9986590747401361&#39;, &#39;volumeUsd24Hr&#39;: &#39;934829.2721936238561278&#39;, &#39;priceUsd&#39;: &#39;0.8800890380672851&#39;, &#39;changePercent24Hr&#39;: &#39;0.6728371166430301&#39;, &#39;vwap24Hr&#39;: &#39;0.8724355317276518&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xb62132e35a6c13ee1ee0f84dc5d40bad8d815206&#39;}, {&#39;id&#39;: &#39;gatetoken&#39;, &#39;rank&#39;: &#39;70&#39;, &#39;symbol&#39;: &#39;GT&#39;, &#39;name&#39;: &#39;GateToken&#39;, &#39;supply&#39;: &#39;108265076.6284058700000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;481501606.0977988698111407&#39;, &#39;volumeUsd24Hr&#39;: &#39;2161541.0434880827797547&#39;, &#39;priceUsd&#39;: &#39;4.4474323677841067&#39;, &#39;changePercent24Hr&#39;: &#39;0.1418688934807658&#39;, &#39;vwap24Hr&#39;: &#39;4.4373215010323435&#39;, &#39;explorer&#39;: None}, {&#39;id&#39;: &#39;curve-dao-token&#39;, &#39;rank&#39;: &#39;71&#39;, &#39;symbol&#39;: &#39;CRV&#39;, &#39;name&#39;: &#39;Curve DAO Token&#39;, &#39;supply&#39;: &#39;531583334.4153923400000000&#39;, &#39;maxSupply&#39;: &#39;3303030299.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;469668919.0537372770300482&#39;, &#39;volumeUsd24Hr&#39;: &#39;13365038.8996802711471404&#39;, &#39;priceUsd&#39;: &#39;0.8835282986631902&#39;, &#39;changePercent24Hr&#39;: &#39;10.0659803681155120&#39;, &#39;vwap24Hr&#39;: &#39;0.8503735226169218&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xD533a949740bb3306d119CC777fa900bA034cd52&#39;}, {&#39;id&#39;: &#39;dash&#39;, &#39;rank&#39;: &#39;72&#39;, &#39;symbol&#39;: &#39;DASH&#39;, &#39;name&#39;: &#39;Dash&#39;, &#39;supply&#39;: &#39;10960794.9423933500000000&#39;, &#39;maxSupply&#39;: &#39;18900000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;459576068.3020828318266199&#39;, &#39;volumeUsd24Hr&#39;: &#39;33729202.7052242444320458&#39;, &#39;priceUsd&#39;: &#39;41.9290818519529628&#39;, &#39;changePercent24Hr&#39;: &#39;1.0434267454012207&#39;, &#39;vwap24Hr&#39;: &#39;41.8387614349700913&#39;, &#39;explorer&#39;: &#39;https://explorer.dash.org&#39;}, {&#39;id&#39;: &#39;lido-dao&#39;, &#39;rank&#39;: &#39;73&#39;, &#39;symbol&#39;: &#39;LDO&#39;, &#39;name&#39;: &#39;Lido DAO&#39;, &#39;supply&#39;: &#39;312951153.9586575600000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;449998011.3955779016098095&#39;, &#39;volumeUsd24Hr&#39;: &#39;3564122.2561597499839231&#39;, &#39;priceUsd&#39;: &#39;1.4379177251892317&#39;, &#39;changePercent24Hr&#39;: &#39;9.1435054888846847&#39;, &#39;vwap24Hr&#39;: &#39;1.3982861878519292&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x5a98fcbea516cf06857215779fd812ca3bef1b32&#39;}, {&#39;id&#39;: &#39;trust-wallet-token&#39;, &#39;rank&#39;: &#39;74&#39;, &#39;symbol&#39;: &#39;TWT&#39;, &#39;name&#39;: &#39;Trust Wallet Token&#39;, &#39;supply&#39;: &#39;416649900.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;449299206.3129582017006400&#39;, &#39;volumeUsd24Hr&#39;: &#39;8430393.6602411693561965&#39;, &#39;priceUsd&#39;: &#39;1.0783614884173936&#39;, &#39;changePercent24Hr&#39;: &#39;4.4930114886216013&#39;, &#39;vwap24Hr&#39;: &#39;1.0630742101387769&#39;, &#39;explorer&#39;: &#39;https://explorer.binance.org/asset/TWT-8C2&#39;}, {&#39;id&#39;: &#39;klaytn&#39;, &#39;rank&#39;: &#39;75&#39;, &#39;symbol&#39;: &#39;KLAY&#39;, &#39;name&#39;: &#39;Klaytn&#39;, &#39;supply&#39;: &#39;3081966314.3624870000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;439537983.3063369363413234&#39;, &#39;volumeUsd24Hr&#39;: &#39;9079267.5719759987304887&#39;, &#39;priceUsd&#39;: &#39;0.1426160893641229&#39;, &#39;changePercent24Hr&#39;: &#39;0.6191022403385674&#39;, &#39;vwap24Hr&#39;: &#39;0.1426553489577806&#39;, &#39;explorer&#39;: &#39;https://scope.klaytn.com/blocks&#39;}, {&#39;id&#39;: &#39;enjin-coin&#39;, &#39;rank&#39;: &#39;76&#39;, &#39;symbol&#39;: &#39;ENJ&#39;, &#39;name&#39;: &#39;Enjin Coin&#39;, &#39;supply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;433530345.9974013000000000&#39;, &#39;volumeUsd24Hr&#39;: &#39;4990752.1663088672714455&#39;, &#39;priceUsd&#39;: &#39;0.4335303459974013&#39;, &#39;changePercent24Hr&#39;: &#39;2.3554838437710774&#39;, &#39;vwap24Hr&#39;: &#39;0.4311042265547529&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c&#39;}, {&#39;id&#39;: &#39;basic-attention-token&#39;, &#39;rank&#39;: &#39;77&#39;, &#39;symbol&#39;: &#39;BAT&#39;, &#39;name&#39;: &#39;Basic Attention Token&#39;, &#39;supply&#39;: &#39;1495680554.4163349000000000&#39;, &#39;maxSupply&#39;: &#39;1500000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;428480013.4684310548668095&#39;, &#39;volumeUsd24Hr&#39;: &#39;28235250.5610522348480655&#39;, &#39;priceUsd&#39;: &#39;0.2864782939132604&#39;, &#39;changePercent24Hr&#39;: &#39;0.7739437994690396&#39;, &#39;vwap24Hr&#39;: &#39;0.2878214338372357&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/Bat&#39;}, {&#39;id&#39;: &#39;zilliqa&#39;, &#39;rank&#39;: &#39;78&#39;, &#39;symbol&#39;: &#39;ZIL&#39;, &#39;name&#39;: &#39;Zilliqa&#39;, &#39;supply&#39;: &#39;13422795806.5101030000000000&#39;, &#39;maxSupply&#39;: &#39;21000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;416826648.2427941079112191&#39;, &#39;volumeUsd24Hr&#39;: &#39;11300337.7957809252924270&#39;, &#39;priceUsd&#39;: &#39;0.0310536384708044&#39;, &#39;changePercent24Hr&#39;: &#39;1.9368396897252899&#39;, &#39;vwap24Hr&#39;: &#39;0.0308571377680663&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27&#39;}, {&#39;id&#39;: &#39;stacks&#39;, &#39;rank&#39;: &#39;79&#39;, &#39;symbol&#39;: &#39;STX&#39;, &#39;name&#39;: &#39;Stacks&#39;, &#39;supply&#39;: &#39;1339089603.8414970000000000&#39;, &#39;maxSupply&#39;: &#39;1818000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;412668457.0842839143081786&#39;, &#39;volumeUsd24Hr&#39;: &#39;1496960.7448513978537312&#39;, &#39;priceUsd&#39;: &#39;0.3081709064878454&#39;, &#39;changePercent24Hr&#39;: &#39;2.9805600618152816&#39;, &#39;vwap24Hr&#39;: &#39;0.3075818999029797&#39;, &#39;explorer&#39;: &#39;https://explorer.xinfin.network/&#39;}, {&#39;id&#39;: &#39;mina&#39;, &#39;rank&#39;: &#39;80&#39;, &#39;symbol&#39;: &#39;MINA&#39;, &#39;name&#39;: &#39;Mina&#39;, &#39;supply&#39;: &#39;710781303.8400393000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;402640744.9645440380948237&#39;, &#39;volumeUsd24Hr&#39;: &#39;9976454.3722389819519727&#39;, &#39;priceUsd&#39;: &#39;0.5664762744732492&#39;, &#39;changePercent24Hr&#39;: &#39;5.0021923782883945&#39;, &#39;vwap24Hr&#39;: &#39;0.5716606350346679&#39;, &#39;explorer&#39;: &#39;https://minaexplorer.com/&#39;}, {&#39;id&#39;: &#39;kava&#39;, &#39;rank&#39;: &#39;81&#39;, &#39;symbol&#39;: &#39;KAVA&#39;, &#39;name&#39;: &#39;Kava&#39;, &#39;supply&#39;: &#39;280385904.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;395918473.2926728222429728&#39;, &#39;volumeUsd24Hr&#39;: &#39;4987082.2323192487023010&#39;, &#39;priceUsd&#39;: &#39;1.4120484219943982&#39;, &#39;changePercent24Hr&#39;: &#39;1.2284374907006410&#39;, &#39;vwap24Hr&#39;: &#39;1.4147736131989464&#39;, &#39;explorer&#39;: &#39;https://www.mintscan.io/kava&#39;}, {&#39;id&#39;: &#39;compound&#39;, &#39;rank&#39;: &#39;82&#39;, &#39;symbol&#39;: &#39;COMP&#39;, &#39;name&#39;: &#39;Compound&#39;, &#39;supply&#39;: &#39;7267151.9985256900000000&#39;, &#39;maxSupply&#39;: &#39;10000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;394250678.2719216572911653&#39;, &#39;volumeUsd24Hr&#39;: &#39;9664756.3842276193669435&#39;, &#39;priceUsd&#39;: &#39;54.2510571337856334&#39;, &#39;changePercent24Hr&#39;: &#39;-0.2338435159486449&#39;, &#39;vwap24Hr&#39;: &#39;55.2632097482619266&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xc00e94cb662c3520282e6f5717214004a7f26888&#39;}, {&#39;id&#39;: &#39;fei-protocol&#39;, &#39;rank&#39;: &#39;83&#39;, &#39;symbol&#39;: &#39;FEI&#39;, &#39;name&#39;: &#39;Fei Protocol&#39;, &#39;supply&#39;: &#39;424996177.7889055600000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;392318652.5753754143105160&#39;, &#39;volumeUsd24Hr&#39;: &#39;1299991.4237649042677328&#39;, &#39;priceUsd&#39;: &#39;0.9231110138836096&#39;, &#39;changePercent24Hr&#39;: &#39;6.8551559997316576&#39;, &#39;vwap24Hr&#39;: &#39;0.9899395416504763&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x956F47F50A910163D8BF957Cf5846D573E7f87CA&#39;}, {&#39;id&#39;: &#39;decred&#39;, &#39;rank&#39;: &#39;84&#39;, &#39;symbol&#39;: &#39;DCR&#39;, &#39;name&#39;: &#39;Decred&#39;, &#39;supply&#39;: &#39;14433407.5083091800000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;391690523.1190852585728256&#39;, &#39;volumeUsd24Hr&#39;: &#39;3411071.9141260095559017&#39;, &#39;priceUsd&#39;: &#39;27.1377720675864397&#39;, &#39;changePercent24Hr&#39;: &#39;6.5796169944381395&#39;, &#39;vwap24Hr&#39;: &#39;27.4691430973879070&#39;, &#39;explorer&#39;: &#39;https://mainnet.decred.org/&#39;}, {&#39;id&#39;: &#39;waves&#39;, &#39;rank&#39;: &#39;85&#39;, &#39;symbol&#39;: &#39;WAVES&#39;, &#39;name&#39;: &#39;Waves&#39;, &#39;supply&#39;: &#39;109612864.0000000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;382532980.0227504805997632&#39;, &#39;volumeUsd24Hr&#39;: &#39;25134271.4926975873196797&#39;, &#39;priceUsd&#39;: &#39;3.4898548041108613&#39;, &#39;changePercent24Hr&#39;: &#39;-1.6972888139576552&#39;, &#39;vwap24Hr&#39;: &#39;3.5053345858543961&#39;, &#39;explorer&#39;: &#39;http://wavesexplorer.com/&#39;}, {&#39;id&#39;: &#39;terrausd&#39;, &#39;rank&#39;: &#39;86&#39;, &#39;symbol&#39;: &#39;USTC&#39;, &#39;name&#39;: &#39;TerraClassicUSD&#39;, &#39;supply&#39;: &#39;9809165611.2043130000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;381021701.8617535161599176&#39;, &#39;volumeUsd24Hr&#39;: &#39;3125125.8472402870630576&#39;, &#39;priceUsd&#39;: &#39;0.0388434365331277&#39;, &#39;changePercent24Hr&#39;: &#39;1.2494888570732680&#39;, &#39;vwap24Hr&#39;: &#39;0.0386932691965985&#39;, &#39;explorer&#39;: &#39;https://finder.terra.money/&#39;}, {&#39;id&#39;: &#39;convex-finance&#39;, &#39;rank&#39;: &#39;87&#39;, &#39;symbol&#39;: &#39;CVX&#39;, &#39;name&#39;: &#39;Convex Finance&#39;, &#39;supply&#39;: &#39;67683254.4494330100000000&#39;, &#39;maxSupply&#39;: &#39;100000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;379410606.1362944495231636&#39;, &#39;volumeUsd24Hr&#39;: &#39;213602.1638595784546906&#39;, &#39;priceUsd&#39;: &#39;5.6056791184554633&#39;, &#39;changePercent24Hr&#39;: &#39;4.2338675995953861&#39;, &#39;vwap24Hr&#39;: &#39;5.4661236613628978&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b&#39;}, {&#39;id&#39;: &#39;xinfin-network&#39;, &#39;rank&#39;: &#39;88&#39;, &#39;symbol&#39;: &#39;XDC&#39;, &#39;name&#39;: &#39;XinFin Network&#39;, &#39;supply&#39;: &#39;12293293518.5500000000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;371435904.2504332760644818&#39;, &#39;volumeUsd24Hr&#39;: &#39;1328552.1856259968448223&#39;, &#39;priceUsd&#39;: &#39;0.0302145152305974&#39;, &#39;changePercent24Hr&#39;: &#39;2.4848586946409207&#39;, &#39;vwap24Hr&#39;: &#39;0.0320971017672978&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x41ab1b6fcbb2fa9dced81acbdec13ea6315f2bf2&#39;}, {&#39;id&#39;: &#39;ravencoin&#39;, &#39;rank&#39;: &#39;89&#39;, &#39;symbol&#39;: &#39;RVN&#39;, &#39;name&#39;: &#39;Ravencoin&#39;, &#39;supply&#39;: &#39;11783238910.7964670000000000&#39;, &#39;maxSupply&#39;: &#39;21000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;366291284.8221565399239747&#39;, &#39;volumeUsd24Hr&#39;: &#39;4922493.5641348198245385&#39;, &#39;priceUsd&#39;: &#39;0.0310857895350437&#39;, &#39;changePercent24Hr&#39;: &#39;1.2244127359876099&#39;, &#39;vwap24Hr&#39;: &#39;0.0311079261738362&#39;, &#39;explorer&#39;: &#39;https://ravencoin.network/&#39;}, {&#39;id&#39;: &#39;1inch&#39;, &#39;rank&#39;: &#39;90&#39;, &#39;symbol&#39;: &#39;1INCH&#39;, &#39;name&#39;: &#39;1inch Network&#39;, &#39;supply&#39;: &#39;621373936.1368293000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;355015780.1175582532364449&#39;, &#39;volumeUsd24Hr&#39;: &#39;7462299.5202549856982355&#39;, &#39;priceUsd&#39;: &#39;0.5713399926696993&#39;, &#39;changePercent24Hr&#39;: &#39;1.6124344237340604&#39;, &#39;vwap24Hr&#39;: &#39;0.5702296608016341&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x111111111117dc0aa78b770fa6a738034120c302&#39;}, {&#39;id&#39;: &#39;celo&#39;, &#39;rank&#39;: &#39;91&#39;, &#39;symbol&#39;: &#39;CELO&#39;, &#39;name&#39;: &#39;Celo&#39;, &#39;supply&#39;: &#39;467917103.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;1000000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;351028632.3655414972638412&#39;, &#39;volumeUsd24Hr&#39;: &#39;1873438.6239949513096596&#39;, &#39;priceUsd&#39;: &#39;0.7501940623990004&#39;, &#39;changePercent24Hr&#39;: &#39;1.6367950081170546&#39;, &#39;vwap24Hr&#39;: &#39;0.7485943987351506&#39;, &#39;explorer&#39;: &#39;https://explorer.celo.org/blocks&#39;}, {&#39;id&#39;: &#39;nem&#39;, &#39;rank&#39;: &#39;92&#39;, &#39;symbol&#39;: &#39;XEM&#39;, &#39;name&#39;: &#39;NEM&#39;, &#39;supply&#39;: &#39;8999999999.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;8999999999.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;350220467.7056402146950496&#39;, &#39;volumeUsd24Hr&#39;: &#39;4725564.2598383321722536&#39;, &#39;priceUsd&#39;: &#39;0.0389133853049504&#39;, &#39;changePercent24Hr&#39;: &#39;0.7066839152220979&#39;, &#39;vwap24Hr&#39;: &#39;0.0388500980174797&#39;, &#39;explorer&#39;: &#39;http://nembex.nem.ninja/&#39;}, {&#39;id&#39;: &#39;loopring&#39;, &#39;rank&#39;: &#39;93&#39;, &#39;symbol&#39;: &#39;LRC&#39;, &#39;name&#39;: &#39;Loopring&#39;, &#39;supply&#39;: &#39;1330133545.5263836000000000&#39;, &#39;maxSupply&#39;: &#39;1374513896.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;347372097.6639429052733639&#39;, &#39;volumeUsd24Hr&#39;: &#39;5847016.7971620629010645&#39;, &#39;priceUsd&#39;: &#39;0.2611558056198596&#39;, &#39;changePercent24Hr&#39;: &#39;1.7511723010786933&#39;, &#39;vwap24Hr&#39;: &#39;0.2601670517806713&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0xEF68e7C694F40c8202821eDF525dE3782458639f&#39;}, {&#39;id&#39;: &#39;holo&#39;, &#39;rank&#39;: &#39;94&#39;, &#39;symbol&#39;: &#39;HOT&#39;, &#39;name&#39;: &#39;Holo&#39;, &#39;supply&#39;: &#39;173342974126.7371200000000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;346760608.6951808779650335&#39;, &#39;volumeUsd24Hr&#39;: &#39;3133834.4642120146362407&#39;, &#39;priceUsd&#39;: &#39;0.0020004307093615&#39;, &#39;changePercent24Hr&#39;: &#39;2.2106632329986131&#39;, &#39;vwap24Hr&#39;: &#39;0.0019839315343924&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x6c6ee5e31d828de241282b9606c8e98ea48526e2&#39;}, {&#39;id&#39;: &#39;arweave&#39;, &#39;rank&#39;: &#39;95&#39;, &#39;symbol&#39;: &#39;AR&#39;, &#39;name&#39;: &#39;Arweave&#39;, &#39;supply&#39;: &#39;33394701.0000000000000000&#39;, &#39;maxSupply&#39;: &#39;66000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;332475305.8615105876252524&#39;, &#39;volumeUsd24Hr&#39;: &#39;6103631.8407028998147250&#39;, &#39;priceUsd&#39;: &#39;9.9559300100189724&#39;, &#39;changePercent24Hr&#39;: &#39;-0.3560844423009330&#39;, &#39;vwap24Hr&#39;: &#39;10.0767321112926772&#39;, &#39;explorer&#39;: &#39;https://viewblock.io/arweave&#39;}, {&#39;id&#39;: &#39;bitcoin-gold&#39;, &#39;rank&#39;: &#39;96&#39;, &#39;symbol&#39;: &#39;BTG&#39;, &#39;name&#39;: &#39;Bitcoin Gold&#39;, &#39;supply&#39;: &#39;17513923.5890000000000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;322781564.1668062979627163&#39;, &#39;volumeUsd24Hr&#39;: &#39;775376.4521216062609785&#39;, &#39;priceUsd&#39;: &#39;18.4299972833920703&#39;, &#39;changePercent24Hr&#39;: &#39;1.2307362134315197&#39;, &#39;vwap24Hr&#39;: &#39;18.0983810638819947&#39;, &#39;explorer&#39;: &#39;https://explorer.bitcoingold.org/insight/&#39;}, {&#39;id&#39;: &#39;kusama&#39;, &#39;rank&#39;: &#39;97&#39;, &#39;symbol&#39;: &#39;KSM&#39;, &#39;name&#39;: &#39;Kusama&#39;, &#39;supply&#39;: &#39;8470098.0572620600000000&#39;, &#39;maxSupply&#39;: None, &#39;marketCapUsd&#39;: &#39;319167252.4058496287037865&#39;, &#39;volumeUsd24Hr&#39;: &#39;12802788.4079322957918981&#39;, &#39;priceUsd&#39;: &#39;37.6816478685513258&#39;, &#39;changePercent24Hr&#39;: &#39;-2.4393622590506140&#39;, &#39;vwap24Hr&#39;: &#39;38.6023106465800013&#39;, &#39;explorer&#39;: &#39;https://kusama.subscan.io/&#39;}, {&#39;id&#39;: &#39;binaryx&#39;, &#39;rank&#39;: &#39;98&#39;, &#39;symbol&#39;: &#39;BNX&#39;, &#39;name&#39;: &#39;BinaryX&#39;, &#39;supply&#39;: &#39;2022897.5698063200000000&#39;, &#39;maxSupply&#39;: &#39;21000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;301835823.0563161561674276&#39;, &#39;volumeUsd24Hr&#39;: &#39;3678887.1202379423258940&#39;, &#39;priceUsd&#39;: &#39;149.2096424265392141&#39;, &#39;changePercent24Hr&#39;: &#39;2.0828524647417508&#39;, &#39;vwap24Hr&#39;: &#39;147.7846088246160470&#39;, &#39;explorer&#39;: &#39;https://bscscan.com/token/0x8c851d1a123ff703bd1f9dabe631b69902df5f97&#39;}, {&#39;id&#39;: &#39;gemini-dollar&#39;, &#39;rank&#39;: &#39;99&#39;, &#39;symbol&#39;: &#39;GUSD&#39;, &#39;name&#39;: &#39;Gemini Dollar&#39;, &#39;supply&#39;: &#39;301483851.6800000000000000&#39;, &#39;maxSupply&#39;: &#39;0.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;301078271.8747009035536550&#39;, &#39;volumeUsd24Hr&#39;: &#39;2959930.7614675734966657&#39;, &#39;priceUsd&#39;: &#39;0.9986547212958869&#39;, &#39;changePercent24Hr&#39;: &#39;-0.0079304352650747&#39;, &#39;vwap24Hr&#39;: &#39;0.9956213804735666&#39;, &#39;explorer&#39;: &#39;https://etherscan.io/token/0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd&#39;}, {&#39;id&#39;: &#39;defichain&#39;, &#39;rank&#39;: &#39;100&#39;, &#39;symbol&#39;: &#39;DFI&#39;, &#39;name&#39;: &#39;DeFiChain&#39;, &#39;supply&#39;: &#39;510738160.8525277400000000&#39;, &#39;maxSupply&#39;: &#39;1200000000.0000000000000000&#39;, &#39;marketCapUsd&#39;: &#39;300070447.2369207339610852&#39;, &#39;volumeUsd24Hr&#39;: &#39;766036.1019754867107641&#39;, &#39;priceUsd&#39;: &#39;0.5875230602233462&#39;, &#39;changePercent24Hr&#39;: &#39;-7.5907571011048511&#39;, &#39;vwap24Hr&#39;: &#39;0.6434484096950597&#39;, &#39;explorer&#39;: &#39;http://explorer.defichain.io/&#39;}], &#39;timestamp&#39;: 1666032804447} .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "program design notes",
            "content": "Essential Knowledge . A development process can be ordered and intentional or exploratory in nature . There are multiple development processed like investigation, designing, prototyping, and testing. . A development process that is iterative requires refinement and revision based on feedback, testing, or reflection. . A development process that is incremental is one that breaks the problem into smaller pieces and makes sure each piece works. . Investigation in a development process is useful for understanding and identifying the program constraints. . How is a program developed . Programs start with an idea. . Developer follow steps and stick with plan. . Development is exploratory. . Developers decide on the program requirements that . describe how a program should behave . include a list of user interactions . The program specifications outline all of the requirements . Developers create a prototype of the program. . an incremental process is frequently used so developers can refine small parts of the program . Testing . Developers test the program every step of the way. . Testing occurs at . -Micro level . -Macro level . Developers refine and revise through testing, feedback, and reflection . Essential Knowledge . It is important to acknowledge any code segments that were developed collaboratively or by another source. . Acknowledgement of a code segment written by someone else and used in a program can be in the program documentation. The acknowledgement should include the origin or original author’s name. . Program developments are rarely a solo endeavor . People usually developed by team . Essential Knowledge .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/10/07/Program-Design-and-Development.html",
            "relUrl": "/markdown/2022/10/07/Program-Design-and-Development.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Error Correcting",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 0 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 0 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? order = [] while True: #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item ==&quot;&quot;: break else: order.append(item) print(order) for v in order: total = total + menu[v] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 [&#39;fries&#39;, &#39;burger&#39;] 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | syntax error, | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "design purpose notes",
            "content": "This is about the design purpose. . Computing Innovation . 1.The purpose of computing innovations is to solve problems or to pursue interests through creative expression. . 2.An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovations. . Categories of Innovations . -Games -Social Media -Business -Productivity . -Computers -Smart phones -Wearable . -Ecommerce -Cloud services -Email . Social medias and applications allow users to connect from distance and achieve activity. E-commerce allow users to shop at home. Digital assistance device allow user to control device hand-free. . The purpose of computing innovations is to solve problems or pursue interest through creative expression. . Computer Programs accept input in a variety of different forms: . tactile (touch), audio, visual, text. . Most programs are written in an event driven environment. . Events are triggered by some action, which usually send user input to the program. . Input usually affects the output. . How does a program know what to do upon and event? . Action may be initiated by the user or another program. . In event driven programming program statements are executed when triggered rather than through the sequential flow of control. . Input can come from a user or other programs . Program outputs are any data sent from a program to a device. . Program output is usually based on a program’s input or prior state. . What is a program . A program is a collection of statements. . A statement is a single command. . A group of statement is called a code segment. . Code segment are executed according to the rules of the programming language. . A program is often referred. . Code segment are texts and blocks. . A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software. . A code segment is a collection of program statements that is part of a program. . A program needs to work for a variety of input and situations. . The behavior of a program is how a program functions during execution and is often described by how a user interacts with it. . A program can be described broadly by what is does, or in more detail by both what the program does and how the program statements accomplish this function. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/27/design-purpose.html",
            "relUrl": "/markdown/2022/09/27/design-purpose.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "group collaboration",
            "content": "this is our group collaboration document for our one minute video about the progress of week 4. . link to the document: https://docs.google.com/document/d/1avkIHNbIw9B5v5CJorXVSfoNCwZ0t2p_Jd1e0XT_pVc/edit?usp=sharing .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/20/group-collaboration.html",
            "relUrl": "/markdown/2022/09/20/group-collaboration.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | . . JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "quiz plan",
            "content": "I’ll be planning my quiz questions here . 1.Find the missing length using pythagroean theorem . 2.Find the limit of f(x) . 3.Find the maximum value of the graph . 4.Find the limit of f(x) . College Board Create Performance Task . Step 1: program purpose and function . The purpose of the quiz is to improve a student’s math skill. . Step 2: data abstraction . The code.org does not involve data abstraction because the codes are already covert to blocks. . Step 3: managing complexity . Data abstraction make coding easier for coders. In code.org, user simply drag and drop, list will be not necessary. . Step 4: procedural abstraction . Procedural abstraction allows coder to type less code. For example, you are typing a repeating code for many times, it can be replace with less codes. . Step 5: algorithm implementation . In my code.org quiz, I use sequencing because all the events go in order. . Step 6: testing . I test my quiz by running the program. On each page, I check all the buttons to ensure they lead to the correct page. Last, I check the console log to see if they display the correct thing. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/11/quiz-plan.html",
            "relUrl": "/markdown/2022/09/11/quiz-plan.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "my change in theme",
            "content": "This is my attempt to change the theme of my fastpage . I choose a theme called midnight and change the remote theme on my fastpage. It works great. Except I can’t reach my posts in the changed theme. . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/09/06/my-change-in-theme.html",
            "relUrl": "/markdown/2022/09/06/my-change-in-theme.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Antony Yu&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Antony Yu &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 16 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Antony Yu&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0} &lt;class &#39;dict&#39;&gt; length 3 - person[&#34;name&#34;] Antony Yu &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . mylist = {1, 2, 3, 4} print(&quot;mylist&quot;, mylist, type(mylist), &quot;length&quot;, len(mylist)) print(&quot;- mylist[0]&quot;, mylist[2], type(mylist[2])) . mylist {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; length 4 . TypeError Traceback (most recent call last) /tmp/ipykernel_569/1539318579.py in &lt;module&gt; 1 mylist = {1, 2, 3, 4} 2 print(&#34;mylist&#34;, mylist, type(mylist), &#34;length&#34;, len(mylist)) -&gt; 3 print(&#34;- mylist[0]&#34;, mylist[2], type(mylist[2])) TypeError: &#39;set&#39; object is not subscriptable . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Antony&quot;, &quot;LastName&quot;: &quot;Yu&quot;, &quot;DOB&quot;: &quot;September 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;rany52837@powayusd.com&quot;, &quot;Hobby&quot;: [&quot;rc plane&quot;], &quot;Owns_Cars&quot;: [&quot;rav4&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}, {&#39;FirstName&#39;: &#39;Antony&#39;, &#39;LastName&#39;: &#39;Yu&#39;, &#39;DOB&#39;: &#39;September 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;rany52837@powayusd.com&#39;, &#39;Hobby&#39;: [&#39;rc plane&#39;], &#39;Owns_Cars&#39;: [&#39;rav4&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobby:&quot;, d_rec[&quot;Hobby&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Cars: rav4 . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 Antony Yu Residence: San Diego Birth Day: September 12 Hobby: [&#39;rc plane&#39;] Cars: rav4 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "My page",
            "content": "My Page . This is my personal page. . ### . I like play with keyboards and music software during free time. . .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/28/Mypage.html",
            "relUrl": "/markdown/2022/08/28/Mypage.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "My tool check",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /home/anton/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/anton/.local/share/jupyter/kernels/bash javascript /home/anton/.local/share/jupyter/kernels/javascript python3 /home/anton/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/anton/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/26/mytoolcheck.html",
            "relUrl": "/markdown/2022/08/26/mytoolcheck.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Math",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is the answer for x? 2x+5=7&quot;) if rsp == &quot;1&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the shape of function, 6x² + 11x - 35?&quot;) if rsp == &quot;quadratic&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the y-intercept of this function? y=2x+3&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) rsp = question_with_response(&quot;What is the root of this function? y=2(x+3)&quot;) if rsp == &quot;-3&quot;: print(rsp + &quot; Your answer is correct&quot;) correct += 1 else: print(rsp + &quot; Your answer is incorrect&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, anton running c: Users anton AppData Local Programs Python Python310 python.exe You will be asked 4 questions. Question: Are you ready to take a test? Question: What is the answer for x? 2x+5=7 1 Your answer is correct Question: What is the shape of function, 6x² + 11x - 35? 3 Your answer is incorrect Question: What is the y-intercept of this function? y=2x+3 -3 Your answer is incorrect Question: What is the root of this function? y=2(x+3) 3 Your answer is incorrect anton you scored 1/4 .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdowns/2022/08/24/quiz.html",
            "relUrl": "/markdowns/2022/08/24/quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "test markdown",
            "content": "This is the first markdown of this fastpage . this is the first blog. .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/08/23/test-markdown.html",
            "relUrl": "/markdown/2022/08/23/test-markdown.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Title",
            "content": "print(&quot;hi, this is my first fastpage&quot;) . hi, this is my first fastpage .",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/2022/08/23/myjupyternotebook.html",
            "relUrl": "/2022/08/23/myjupyternotebook.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "docker server",
            "content": "",
            "url": "https://antonyrc6.github.io/Antony-s-fast-page/markdown/2022/06/16/docker-server.html",
            "relUrl": "/markdown/2022/06/16/docker-server.html",
            "date": " • Jun 16, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Antony Y. I’m a 9th grader at Del Norte High School. . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "Error Correcting | RapidAPI Testing | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Class",
          "content": "this page is for recording assignments. . week notes . week 0 | Creating the fastpage | . week 1 | Use python to create a quiz | . week 2 | List and dictionary, theme, darkmode | . week 3 | Creating a quiz in code.org | . week 4 | Running fast page locally | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/class/",
          "relUrl": "/class/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Frontend&key",
          "content": "| Overview | Tutorial | . AWS private key . —–BEGIN RSA PRIVATE KEY—– MIIEowIBAAKCAQEAhGEt3gND/6Nsx5wHVQoiGOh5E1J02uVNQHsoxKTSxbNKfxlk ehARRnlppqzEO+1ej8djJusg0AOXDevpwyl3ZcyW+r7Pm1bp2xwNaO/uUltXD7pU TAnRkhBfAZPkLdwLpTLCUWQhFHtjypPBKFsOAp3QuqO2qpsR7qWRT6QP6H9zdQpk oUOA9na9bIvZ0tH3ucW9DTXbH8A4vOzFfW+uqGEsxYsDBhwFF0Le9ed8IkAY6S9I l9Mo1G/f3fuOERXiX2XZZ90tj/XQvxGzKBkaMge3pK3KGoG6zlYYOgLrWWBfDQVM /TNfglWIym2Ppfnv810fkPYO/2mlN+bozlocmQIDAQABAoIBADWjls09r4DW/E3J SCNKDtTe5ahRoe3MOcgl3zgGvSzEYCwt4sue1REkQw35NS4/GTDTDrcHUO1Ydw16 COc+VxXVl1uUk1STHADfVgOuLHgMcLN7wYpp9BPmNEjUXwHCBqnyblBCbTD6ak38 Hqk2c+/VeG0Xxv1MBjEXv1Bw3s1KuhJ5bfB0dK/QEC+9wfyDWHtMB3Cwc/fduyt3 UIS6l9g90WQRra2ud7YVVGhh+fLAupZjiojOzekG86ddoDcJmsdJix01Fl3t/ix6 soSyq2xxRwyUFTqqaBlKGVbHUshyv3rLVKHiZEO7Rml0E5k7mPmkgHBSK/1bRwJE lr/JnbECgYEAuTg6R98iG1KNgZmomSZqLaoSlW/5SnZH0wXMBMbnLx/cKgdxc2O7 Ls11sz7p1P8dd8Jn2QW+9bj3nKHHfRbnO9STPhD4yggGRTD5izztg4nnCp78dNqA Ml42IfjF7+dm9aDDW47cmx8f7ScNEV43jpBeAQ+6k8OhC8hQJvn8tOUCgYEAtvev yMDVuAFHy8uA89FdB9wKs5NniRdaqAx/ldKV6XuHEVHlSx3hL2YHLohWXriuBqTn GuzAwVy6DTUdccUTPqigqnLCsK7F9xk0xMEFUKgtwMvIH+wDUZZT5e9TxrlnfvHR LPLV/9G4rVI9JrRHb04Z7aE9/CE7P63F7WQIIaUCgYBtj1L6HITiQIyvsqLGJLD9 3fIsLxX488o8ittJoBY0C9aBjfGP3dhlMOeEZZyPf3CA3J/tAbcZRpZBMnj8B0Y0 X+PQ/N0NNH3xA604rYuZGUNvRufyfyUBpjTDF5KN/AUtGjE0wWbA40JRV54lPeQD EmZonlMxALEMdSrkQ081+QKBgE4pn6m2X1adDWvNQwhlr0V1RgkS9o8FMBBMTpDV hn9Y6wmGH9soJ5PVFUpWqfcLFCT4e1XwQCQalcygnTSGCUOiTAikv/E0qJN37CgF gVzEi88p/xNMAtruymaXCAYEHGeJrF90WeFQWYGJeWA4ca/mAIOYd19nXuVEOiLA sgyVAoGBAIJwiUoH0WJyQC9lR0OPtealRxQ01MqMI4P1icyTOBSnpmiREFs9UGWi ppVjuWiaF74ECkVnlhTMwKnTH0Q6nyZ78SVilBPdO7/HNO/OqFz46FRaCzhcpBxT SNQv5f2emuhnpIa4Bq8hw6Z8NPzPP1RRDMlAaMBzEChEBKr4YY27 —–END RSA PRIVATE KEY—– .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://antonyrc6.github.io/Antony-s-fast-page/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}